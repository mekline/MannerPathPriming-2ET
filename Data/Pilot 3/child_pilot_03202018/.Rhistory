bootData <- indData %>%
group_by(Condition, Phase) %>%
summarize(bootLower = bootdown(indMean), bootUpper = bootup(indMean))
plotData <- merge(bootData, plotData, by=c("Condition", "Phase"), all.x=TRUE, all.y=TRUE)
#print(plotData)
ggplot(plotData, aes(x=Condition, y=theAvg, colour=Condition)) +
geom_bar(position=position_dodge(), stat="identity", fill="white") +
geom_errorbar(aes(ymin=bootLower, ymax=bootUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
geom_point(data = indData, aes(y = indMean, x = Condition, colour = Condition), size = 3, alpha = 0.6, position = position_jitter(width = 0.3, height = 0.005)) +
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
facet_grid(~Phase)+
scale_colour_manual(values = c("blue","red")) +
theme(strip.background = element_blank()) +
theme(legend.title=element_blank()) +
theme(text = element_text(size=30)) + #FOR PRESENTATIONS
ggtitle(title)
ggsave(myfile, width=8, height=10)
}
setwd(sdir)
makeNonBar(filter(allData, Condition == "Manner" | Condition == "Path"), "MannerPath_Bias_bySubj.jpg")
makeNonBar(filter(allData, Condition == "Action" | Condition == "Effect"), "ActionEffect_Bias_bySubj.jpg")
library(papaja)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(pwr)
library(bootstrap)
# Seed for random number generation
set.seed(42)
## Set your directory to the root of the MPP repository on your local machine!!
require("knitr")
opts_knit$set(root.dir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/")
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/Data/" , sep="")
sdir = paste(repodir, "Submissions/" , sep="")
pFile = paste(repodir,"MannerPath_Data.csv",sep="") #get files ready...
files = list.files(ddir, pattern = ".dat$") #all .dat files in data directory
participantData = read.csv(pFile, sep = ",", header = T) #load the info data file
######
# DATA CLEANING
######
#loop over files (participants) and the rows in the file
#For now, just read in all lines of every data file. Assert that all have the same columns
#names at the start, but some may have extra columns if they have extension data. Later on we'll
#clean up and reshape to get nicer formatted data.
#Notes:
# - No .dat files for 1,2, 35, 42, 69 (1-2 pilot, 35-69 kids who consented/are on camera
# but didn't get to the exp)
#
# - Errors on files 10, 75, 76, 77.  10 is a kid who .... ###TO ADD XXXX
setwd(ddir)
allData <- data.frame(NULL)
trialData <- data.frame(NULL)
pData <- data.frame(NULL)
error_files = list() #create an empty error list
for (file in files) {
trialData <- try(read.table(file, sep = ",", header = T, fill=T))
if (class(trialData) == 'try-error') {
cat('Caught an error during read.table.\n')
cat(file)
} else {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
if(length(pData$Age.Years) > 0){
if (!is.na(pData$Age.Years)){ #(This only happens for a NA line where a subj number was skipped)
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
myData$trainingEndTime <- as.numeric(myData$trainingEndTime)
myData$finalTestStart <- as.numeric(myData$finalTestStart)
myData$finalTestEnd <- as.numeric(myData$finalTestEnd)
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
}
}
}
}
length(unique(allData$SubjectNo)) #Print this here to make sure we don't lose any data during reorganization below
length(allData$SubjectNo)
#It's a great big data frame! Begin by dropping columns that we don't need for analysis (mostly names of individual vid files)
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
#Recode variable names
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
length(unique(allData$SubjectNo))
length(allData$SubjectNo)
allData1 <- allData %>% #A few participants had the extension trials coded on the same lines as trials 1-8, just have to rearrange them
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
#this could all be a gather probably, but it aint working
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide)) %>% #re-adding the normal ones
rbind(allDataBase) %>% #add base, then ext. trials of the weirdos
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason) #just reordering
length(unique(allData$SubjectNo))
length(allData$SubjectNo)
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Experiment !="E1 - MannerPath") %>%
filter(Inclusion.Decision == 1) %>% #TODO: Eventually do this above and report stats!
select(-c(Inclusion.Decision, Exclude.Reason))
length(unique(allData$SubjectNo))
#Reshaping for analysis and graphs
allData <- allData %>% #Translate kid choice variables to objective 'choseM' for Bias (main) & Test (sanity check - did they learn the verb)
filter(kidResponseBias == 'z' | kidResponseBias == 'c') %>% #remove trials w/ no answer on critical Bias q
mutate(choseM.Bias = ifelse((mannerSideBias == "L" & kidResponseBias == "z")|
(mannerSideBias == "R" & kidResponseBias == "c"), 1, 0)) %>%
mutate(choseM.Test = ifelse((mannerSideTest == "L" & kidResponseTest == "z")|
(mannerSideTest == "R" & kidResponseTest == "c"), 1, 0)) %>%
mutate(expPhase = ifelse(trialNo>8,"Extension","Base")) #Mark trials 1-8 and 9-16
#How many S's included? Collapse to 'chose manner' score rather than individual trial responses - notice for 'extend' this collapses the 2 experiment phases, DON"T use these for stats, jsut S level info :)
scoreData <- aggregate(allData$choseM.Bias, by=list(allData$Condition, allData$Age.Years, allData$Gender, allData$SubjectNo), sum)
names(scoreData) <- c("Condition", "Years", "Gender", "SubNo", "choseMScore")
table(scoreData$Years, scoreData$Gender, scoreData$Condition)
table(scoreData$Condition)
allData <- filter(allData, trialNo>1) #Trial #1 Bias test is pre-training!!
setwd(sdir)
######
# GRAPHS
######
#Change 1.3.17 bootstrapped CIS
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
makePlot = function(ydata, myfile, ylab="proportion chosing Manner/Action", title=""){
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition,  ydata$trialNo), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$trialNo), length)
names(plotData) <- c("Condition", "trialNo", "choseManner")
plotData$numObs <- numObs$x
plotData$Phase <- ifelse(plotData$trialNo < 9, "Base", "Extension")
#get the binomial conf.intervals per condition per trial, AND THE BOOTSTRAPPED ONES (by subj since each contribs 1 data point here)
for (cond in unique(plotData$Condition))
{
for (trial in unique(plotData[plotData$Condition == cond,]$trialNo))
{
x = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$choseManner
n = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$trialNo == trial] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$trialNo == trial]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$trialNo == trial] = x/n
plotData$bootLower[plotData$Condition == cond & plotData$trialNo == trial] = bootdown(c(as.vector(rep(1,x)), as.vector(rep(0,n-x))))
plotData$bootUpper[plotData$Condition == cond & plotData$trialNo == trial] = bootup(c(as.vector(rep(1,x)), as.vector(rep(0,n-x))))
}
}
#print(plotData) #good for debugging
#make a plot with ggplot
pd <- position_dodge(0.1)
ggplot(plotData, aes(x=trialNo, y=theAvg, colour=Condition, group=Condition, ymax = 1)) +
geom_errorbar(aes(ymin=bootLower, ymax=bootUpper), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
ylab(ylab) +
xlab("Trial Number") +
geom_point(position=pd, size=3) +
coord_cartesian(ylim=c(0,1)) +
theme_bw() +
scale_colour_manual(values = c("blue","red")) +
facet_grid(~Phase, space="free_x", scale="free_x")+
theme(strip.background = element_blank()) +
theme(legend.title=element_blank()) +
theme(text = element_text(size=30)) + #FOR PRESENTATIONS
ggtitle(title)
ggsave(filename=myfile, width=12, height=8)
}
makePlot(filter(allData, Condition == "Manner" | Condition == "Path"), "MannerPath_Bias_byTrial.jpg")
makePlot(filter(allData, Condition == "Action" | Condition == "Effect"), "ActionEffect_Bias_byTrial.jpg")
makeNonBar = function(ydata, myfile, ylab="proportion chosing Manner/Action", title="") {
#Summarize for bar graph parts
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
#Summarize for individual subject proportions
indData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase, ydata$SubjectNo), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase, ydata$SubjectNo), length)
names(indData) <- c("Condition", "Phase", "SubjectNo", "choseManner")
indData$numObs <- numObs$x
indData$indMean <- indData$choseManner / indData$numObs
#NEW 1.3.17 switching to bootstrapped CIs by subject
bootData <- indData %>%
group_by(Condition, Phase) %>%
summarize(bootLower = bootdown(indMean), bootUpper = bootup(indMean))
plotData <- merge(bootData, plotData, by=c("Condition", "Phase"), all.x=TRUE, all.y=TRUE)
#print(plotData)
ggplot(plotData, aes(x=Condition, y=theAvg, colour=Condition)) +
geom_bar(position=position_dodge(), stat="identity", fill="white") +
geom_errorbar(aes(ymin=bootLower, ymax=bootUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
geom_point(data = indData, aes(y = indMean, x = Condition, colour = Condition), size = 3, alpha = 0.6, position = position_jitter(width = 0.3, height = 0.005)) +
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
facet_grid(~Phase)+
scale_colour_manual(values = c("blue","red")) +
theme(strip.background = element_blank()) +
theme(legend.title=element_blank()) +
theme(text = element_text(size=30)) + #FOR PRESENTATIONS
ggtitle(title)
ggsave(myfile, width=8, height=10)
}
setwd(sdir)
makeNonBar(filter(allData, Condition == "Manner" | Condition == "Path"), "MannerPath_Bias_bySubj.jpg")
makeNonBar(filter(allData, Condition == "Action" | Condition == "Effect"), "ActionEffect_Bias_bySubj.jpg")
model_eff4 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Base, family="binomial")
#Note first Bias trial was removed above; it tells us nothing, no evidence has been seen yet!
Exp1 <- filter(allData, Experiment == "E1 - MannerPath")
Exp2.Base <- filter(allData, Experiment == "E2 - ActionEffect extend to MannerPath" & expPhase == "Base")
Exp2.Extend <- filter(allData, Experiment == "E2 - ActionEffect extend to MannerPath" & expPhase == "Extension")
Exp3.Base <- filter(allData, Experiment == "E3 - MannerPath extend to ActionEffect" & expPhase == "Base")
Exp3.Extend <- filter(allData, Experiment == "E3 - MannerPath extend to ActionEffect" & expPhase == "Extension")
model_eff4 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Base, family="binomial")
model_noeff4 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp3.Base, family="binomial")
anova(model_eff4, model_noeff4)
#Exp3 Extension
model_eff5 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Extend, family="binomial")
model_noeff5 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp3.Extend, family="binomial")
anova(model_eff5, model_noeff5)
#Exp2 base
model_eff2 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp2.Base, family="binomial")
model_noeff2 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp2.Base, family="binomial")
anova(model_eff2, model_noeff2)
#Exp2 Extension
model_eff3 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp2.Extend, family="binomial")
model_noeff3 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp2.Extend, family="binomial")
anova(model_eff3, model_noeff3)
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
kids_to_process <- c('child_pilot_0306',
'child_pilot_0314',
'child_pilot_03162018',
'child_pilot_03202018',
'pilot x2')
#Set your directories
myRepo = '/Users/mekline/Dropbox/_Projects/MannerPath-2ET/MannerPathPriming-2ET Repo'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
setwd(myRepo)
###############################
# LOAD DATA
###############################
#load participantdata
pData <- read.csv('all_participants_MPP2ET.csv')
pData <- pData %>%
filter(SubjectID %in% kids_to_process)
#Load data for all participants from their data folders
DatData <- data.frame(NULL)
TimestampData <- data.frame(NULL)
GazeData <- data.frame(NULL)
for(ID in pData$SubjectID){
myDataDir <- paste(dataDir, ID, '/', sep='')
setwd(myDataDir)
print(ID)
myDatFile <- paste('data_MPPCREATION_',ID, '.dat', sep='')
myTimestampFile <- paste('timestamps_MPPCREATION_',ID,'.csv',sep='')
myMainGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Main_.*.csv")
myPracticeGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
myDatData <- read.csv(myDatFile)
myTimestampData <- read.csv(myTimestampFile)
myGazeData <- data.frame(NULL)
for (f in myMainGazeFiles){
thisGazeData = read.csv(f)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Main'
if(nrow(myGazeData) == 0) {
myGazeData = thisGazeData
} else{
myGazeData = bind_rows(myGazeData, thisGazeData)
}
}
for (f in myPracticeGazeFiles){
thisGazeData = read.csv(f)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Practice'
myGazeData = bind_rows(myGazeData, thisGazeData)
}
#Add everything to the big DFs!
if (nrow(DatData) == 0){ #special case for 1st round
DatData = myDatData
TimestampData = myTimestampData
GazeData = myGazeData
} else {
DatData = bind_rows(DatData, myDatData)
TimestampData = bind_rows(TimestampData, myTimestampData)
GazeData = bind_rows(GazeData, myGazeData)
}
}
TimestampData <- TimestampData %>%
mutate(system_time_stamp = system_time_stamp - 1500000000000000) %>%
mutate(point_description = ifelse(str_count(point_description, "Practice"),
point_description,
paste("Main_", point_description, sep="")))%>%
separate(point_description, c("phaseTimestamp", "trialNo", "description"), extra = 'merge', remove = FALSE)
GazeData <- GazeData %>%
mutate(system_time_stamp = system_time_stamp - 1500000000000000)%>%
mutate(SubjectID = subjectID) %>%
select(-SubjectID)
DatData <- DatData %>%
select(c("SubjectNo","Date","Time","VerbDomain","Condition","trialNo","itemID" ,"verbName","verbMeaning",
"mannerSideBias", "pathSideBias","mannerSideTest", "pathSideTest")) %>%
mutate_if(is.factor, as.character) %>%
mutate(SubjectID = SubjectNo) %>%
mutate(itemID = as.character(itemID))%>%
select(-SubjectNo) %>%
mutate(phaseDat = 'Main') %>%
mutate(targetSideBias = ifelse(Condition == 'Manner', mannerSideBias,pathSideBias)) %>%
mutate(targetSideTest = ifelse(Condition == 'Manner', mannerSideTest, pathSideTest))
#Manually add Pratice lines to the Dat files - parameters always the same! Target on the right for trial 1, target on left for trial 2
#NOTE: This may add a trial the child didn't actually do (ie if second practice trial
#wasn't run), but this will be fine bc it won't correspond to any timestamps
pract1 <- DatData %>%
group_by(SubjectID)%>%
summarise_all(first)%>%
mutate(trialNo = 1, itemID = 'practice1', verbName = 'NA', phaseDat = 'Practice',
verbMeaning = 'ball', mannerSideBias = 'NA', pathSideBias = 'NA',
mannerSideTest = 'NA', pathSideTest = 'NA', targetSideBias = 'NA', targetSideTest = 'R')
pract2 <- DatData %>%
group_by(SubjectID)%>%
summarise_all(first)%>%
mutate(trialNo = 2, itemID = 'practice2', verbName = 'NA', phaseDat = 'Practice',
verbMeaning = 'book', mannerSideBias = 'NA', pathSideBias = 'NA',
mannerSideTest = 'NA', pathSideTest = 'NA', targetSideBias = 'NA', targetSideTest = 'L')
DatData <- bind_rows(DatData, pract1)
DatData <- bind_rows(DatData, pract2)
View(DatData)
View(TimestampDataData)
View(TimestampData)
###############################
# MERGE DATA (ahhhh!)
###############################
#Merge all subject-level data
AllSubjData <- merge(DatData, pData, by="SubjectID")
#Get start times to normalize clock variables!
startTime <- TimestampData %>%
group_by(subjectID) %>%
arrange(system_time_stamp)%>%
summarize_all(first)%>%
select(subjectID, system_time_stamp)%>%
mutate(expStartTime = system_time_stamp) %>%
select(-system_time_stamp)
GazeData = merge(GazeData, startTime, by=c("subjectID"))
GazeData <- GazeData %>%
mutate(adjusted_time = system_time_stamp - expStartTime) %>%
select(-c(device_time_stamp, system_time_stamp, expStartTime)) %>%
separate(description, c("x","y","z", "w", "trialNo")) %>%
select(-c(x,y,z,w))
#Reshape TimestampData
TimestampData = merge(TimestampData, startTime, by = c("subjectID"))
TimestampData <- TimestampData %>%
mutate(adjusted_start_time = system_time_stamp - expStartTime) %>%
select(-c(system_time_stamp, expStartTime, point_description)) %>%
arrange(subjectID, adjusted_start_time) %>%
mutate(phaseTimestamp = factor(phaseTimestamp, levels=c("Practice","Main")))%>%
mutate(timeGroupings = paste(subjectID, phaseTimestamp, trialNo)) %>%
group_by(timeGroupings) %>%
mutate(adjusted_end_time = lead(adjusted_start_time, order_by = timeGroupings)) %>%
mutate(next_description = lead(description, order_by = timeGroupings)) %>% #NOTE: these give nonsensical values between edge cases, watch out...
ungroup() %>%
select(-timeGroupings) %>%
#Doing some cleanup on those bad edge cases
mutate(next_description = ifelse(description == 'SameVerbTest_compareVideo2_end',
'TRIAL END', next_description)) %>%
mutate(adjusted_end_time = ifelse(description == 'SameVerbTest_compareVideo2_end',
NA, adjusted_end_time)) %>%
mutate(segment_length_in_sec = (adjusted_end_time-adjusted_start_time)/1000)%>% #For checking things are the right length....
#Column cleanup:
mutate(trial_segment = paste(description, next_description, sep='-TO-'))%>%
select(-c(description, next_description))
#Add labels to the GazeData!
#This function takes a timepoint and a set of TimestampData
#already known to belong to the same kid, and adds the correct timestamp column!
get_timelabel = function(gazetime, kid){
Timestamp_series = filter(practiceTimestampData, subjectID == kid)
Timestamp_series$between <- (gazetime > Timestamp_series$adjusted_start_time) &
(gazetime < Timestamp_series$adjusted_end_time)
mylabelrow <- filter(Timestamp_series, between)
if (nrow(mylabelrow) == 1){
mylabel = mylabelrow$trial_segment
}else{
mylabel = 'COULD NOT ASSIGN LABEL'
}
return(mylabel)
}
practiceSubjData = filter(AllSubjData, SubjectID == 'child_pilot_03202018')
practiceTimestampData = filter(TimestampData, subjectID == 'child_pilot_03202018')
practiceGazeData = filter(GazeData, subjectID == 'child_pilot_03202018', phaseGaze == 'Main', trialNo < 3)
practiceGazeDataLine = practiceGazeData[3000,]
#This function takes a timepoint and a set of TimestampData
#already known to belong to the same kid, and adds the correct timestamp column!
get_timelabel = function(gazetime, kid){
Timestamp_series = filter(practiceTimestampData, subjectID == kid)
Timestamp_series$between <- (gazetime > Timestamp_series$adjusted_start_time) &
(gazetime < Timestamp_series$adjusted_end_time)
mylabelrow <- filter(Timestamp_series, between)
if (nrow(mylabelrow) == 1){
mylabel = mylabelrow$trial_segment
}else{
mylabel = 'COULD NOT ASSIGN LABEL'
}
return(mylabel)
}
practiceGazeData <- practiceGazeData %>%
mutate(trial_segment = get_timelabel(adjusted_time, subjectID))
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
kids_to_process <- c('child_pilot_0306',
'child_pilot_0314',
'child_pilot_03162018',
'child_pilot_03202018',
'pilot x2')
