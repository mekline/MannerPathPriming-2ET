ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" &pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> allPractice_test
allPractice$lookPractice <- as.logical(allPractice$lookPractice)
allPractice_test$lookPractice <- as.logical(allPractice_test$lookPractice)
data <- make_eyetrackingr_data(allPractice_test,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = "lookPractice",
treat_non_aoi_looks_as_missing = FALSE
)
response_window_agg_by_sub <- make_time_window_data(data, aois = "lookPractice", summarize_by = c("subjectID"))
str(allPractice_test$subjectID)
View(temp)
View(df_practice)
time_trial(df_practice$system_time_stamp)
x <- trial_time(df_practice$system_time_stamp)
a <- lapply(df_practice$system_time_stamp, trial_time)
df_practice$Trial_description <- a
allPractice <- filter(allData, phase=="Practice")
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> allPractice_test
View(allPractice_test)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000000
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
############################
# LOOKING AT PRACTICE TRIALS
############################
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
trial_time1 <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
z1 = as.character(df_timestamps$point_description[y+1])
z2 <- paste(z1, z, sep=",")
#x <- cbind(x, newColumn = z2)
return(z2)
}
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
counter = 0
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
############################
# LOOKING AT PRACTICE TRIALS
############################
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
options(scipen=999)
View(df_practice)
for(i in subj.folders){
############################
# LOOKING AT MAIN TRIALS
############################
df_main <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_main){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_main <- rbind(df_main, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_main)[which(names(df_main) == "description")] <- "trialNo"
df_main$L_valid <- as.factor(df_main$L_valid)
df_main$R_valid <- as.factor(df_main$R_valid)
df_main$system_time_stamp <- df_main$system_time_stamp - 1500000000000000
df_main$phase <- 'Main'
# Merging together dat_table and trials to get correctness
df_main$trialNo <- as.factor(ifelse(df_main$trialNo == "All_of_noBias_trial_1", "1",
ifelse(df_main$trialNo == "All_of_noBias_trial_2", "2",
ifelse(df_main$trialNo == "All_of_noBias_trial_3", "3",
ifelse(df_main$trialNo == "All_of_noBias_trial_4", "4",
ifelse(df_main$trialNo == "All_of_Main_trial_5", "5",
ifelse(df_main$trialNo == "All_of_Main_trial_6", "6",
ifelse(df_main$trialNo == "All_of_Main_trial_7", "7",
ifelse(df_main$trialNo == "All_of_Main_trial_8", "8", "Error")))))))))
subjData <- rbind(subjData, df_main)
}
for(i in subj.folders){
##########################
# LOOKING AT EXTEND TRIALS
##########################
# Reading in extend trial CSVs
df_extend <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_extend){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
if("trialNo" %in% colnames(temp)) {
temp <- subset(temp, select=-c(trialNo))
}
df_extend <-rbind(df_extend, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_extend)[which(names(df_extend) == "description")] <- "trialNo"
df_extend$L_valid <- as.factor(df_extend$L_valid)
df_extend$R_valid <- as.factor(df_extend$R_valid)
df_extend$system_time_stamp <- df_extend$system_time_stamp - 1500000000000000
df_extend$phase <- 'Extend'
# Merging together dat_table and trials to get correctness
df_extend$trialNo <- as.factor(ifelse(df_extend$trialNo == "All_of_Extend_trial_5", "13",
ifelse(df_extend$trialNo == "All_of_Extend_trial_6", "14",
ifelse(df_extend$trialNo == "All_of_Extend_trial_7", "7",
ifelse(df_extend$trialNo == "All_of_Extend_trial_8", "8",
ifelse(df_extend$trialNo == "All_of_Extend_trial_1", "9",
ifelse(df_extend$trialNo == "All_of_Extend_trial_2", "10",
ifelse(df_extend$trialNo == "All_of_Extend_trial_3", "11",
ifelse(df_extend$trialNo == "All_of_Extend_trial_4", "12", "Error")))))))))
subjData <- rbind(subjData, df_extend)
}
colnames(df_data_table)[1] <- c("subjectID")
df_data_table$trialNo <- as.factor(df_data_table$trialNo)
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
allData <- merge(subjData, df_data_table, by=c("subjectID", "trialNo"))
allData$subjectID <- as.factor(allData$subjectID)
allData$Trackloss_column <- ifelse(allData$L_valid == '1' & allData$R_valid == '1', FALSE,
ifelse(allData$L_valid == '0' & allData$R_valid == '1', TRUE,
ifelse(allData$L_valid == '1' & allData$R_valid == '0', TRUE,
ifelse(allData$L_valid == '0' & allData$R_valid == '0', TRUE, 'Error'))))
allData$Trackloss_column <- as.logical(allData$Trackloss_column)
allData$X <- rowMeans(subset(allData, select = c(6, 9)), na.rm = TRUE)
allData$Y <- rowMeans(subset(allData, select = c(7, 10)), na.rm = TRUE)
a <- lapply(allData$system_time_stamp, trial_time)
allData$Trial_description <- a
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookMannerBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" &pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> allPractice_test
View(allData)
allData$subjectID
subjData$subjectID
as.factor(subjData$subjectID)
View(df_timestamps)
View(df_data_table)
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
trial_time1 <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
z1 = as.character(df_timestamps$point_description[y+1])
z2 <- paste(z1, z, sep=",")
#x <- cbind(x, newColumn = z2)
return(z2)
}
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
counter = 0
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
print(data_table)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
############################
# LOOKING AT PRACTICE TRIALS
############################
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
View(df_data_table)
View(df_data_table)
View(temp)
View(df_data_table)
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
print(data_table)
if(identical(data_table, character(0))) {
NULL
}
else {
temp1 <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp1)
}
}
View(df_data_table)
rm(df_data_table)
View(temp1)
View(subjData)
str(subjData$subjectID)
View(temp1)
a <- lapply(df_practice$system_time_stamp, trial_time)
df_practice$Trial_description <- a
View(df_practice)
View(df_timestamps)
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
a <- lapply(df_practice$system_time_stamp, trial_time)
df_practice$Trial_description <- a
df_practice %>%
filter(str_detect(Trial_description, "testVideos")) -> df_practice_test
df_practice_test %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> df_practice_test
df_practice_test %>%
group_by(subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> df_practice_test
df_practice_test$subjectID <- as.factor(df_practice_test$subjectID)
df_practice_test$Trackloss_column <- ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '1', FALSE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '1', TRUE,
ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '0', TRUE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '0', TRUE, 'Error'))))
df_practice_test$Trackloss_column <- as.logical(df_practice_test$Trackloss_column)
df_practice_test$X <- rowMeans(subset(df_practice_test, select = c(6, 9)), na.rm = TRUE)
df_practice_test$Y <- rowMeans(subset(df_practice_test, select = c(7, 10)), na.rm = TRUE)
df_practice_test %>%
group_by(subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> df_practice_test
data <- make_eyetrackingr_data(df_practice_test,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = "lookPractice",
treat_non_aoi_looks_as_missing = FALSE
)
response_window_agg_by_sub <- make_time_window_data(data, aois = "lookPractice", summarize_by = c("subjectID"))
View(response_window_agg_by_sub)
ggplot(data=response_window_agg_by_sub, aes(x=subjectID, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
ylab("Proportion of looks to screen") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("pilot_practice.png")
