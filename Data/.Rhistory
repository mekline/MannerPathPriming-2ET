df_NC2$Context <- as.factor(as.character(df_NC2$Context))
df_NC2 <- df_NC2[-c(1,2), ]
df_All <- rbind(df_C2, df_NC2)
df_All2 <- melt(df_All, id=c("Subject","Context"))
names(df_All2)[names(df_All2)=="variable"] <- "Trial"
names(df_All2)[names(df_All2)=="value"] <- "Response"
df_All2$Response2 <- as.factor(ifelse(df_All2$Trial == "circle100_60" & df_All2$Response == 1, "100",
ifelse(df_All2$Trial == "circle100_60" & df_All2$Response == 2, "60",
ifelse(df_All2$Trial == "circle100_60" & df_All2$Response == 3, "Neither",
ifelse(df_All2$Trial == "circle90_70" & df_All2$Response == 1, "70",
ifelse(df_All2$Trial == "circle90_70" & df_All2$Response == 2, "90",
ifelse(df_All2$Trial == "circle90_70" & df_All2$Response == 3, "Neither",
ifelse(df_All2$Trial == "ring100_60" & df_All2$Response == 1, "100",
ifelse(df_All2$Trial == "ring100_60" & df_All2$Response == 2, "60",
ifelse(df_All2$Trial == "ring100_60" & df_All2$Response == 4, "60",
ifelse(df_All2$Trial == "ring100_60" & df_All2$Response == 3, "Neither",
ifelse(df_All2$Trial == "ring100_60" & df_All2$Response == 5, "Neither",
ifelse(df_All2$Trial == "ring90_70" & df_All2$Response == 1, "70",
ifelse(df_All2$Trial == "ring90_70" & df_All2$Response == 2, "90",
ifelse(df_All2$Trial == "ring90_70" & df_All2$Response == 4, "90",
ifelse(df_All2$Trial == "ring90_70" & df_All2$Response == 3, "Neither",
ifelse(df_All2$Trial == "ring90_70" & df_All2$Response == 5, "Neither", "Error")))))))))))))))))
df_All2$Subject <- as.factor(df_All2$Subject)
df_All2$Response3 <- ifelse(df_All2$Response2 == "Neither", 1, 0)
df_All2$Response4 <- ifelse(df_All2$Response2 == "100", 1, 0)
df_All2$Response5 <- ifelse(df_All2$Response2 == "100" | df_All2$Response2 == "90", 1, 0)
df_All2$Trial2 <- as.factor(ifelse(df_All2$Trial  == "ring90_70" | df_All2$Trial  == "circle90_70"  , "9070", "10060"))
df_All2$Experiment <- as.factor("1")
df_C_2 <- read.csv("v5/Pelty_v5_C_2017-6-23.csv", header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_C2_2 <- na.omit(df_C[, c("ResponseId","t1","t_3","t_2","t_4")])
colnames(df_C2_2) <- c("Subject","circle100_60","ring100_60","circle90_70","ring90_70")
df_C2_2$Context <- "WithContext"
df_C2_2$Context <- as.factor(as.character(df_C2$Context))
df_C2_2 <- df_C2_2[-c(1,2), ]
df_NC_2 <- read.csv("v5/Pelty_v5_NC_2017-6-23.csv",header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_NC2_2 <- na.omit(df_NC_2[, c("ResponseId","t1","t3","t2","t4")])
colnames(df_NC2_2) <- c("Subject","circle100_60","ring100_60","circle90_70","ring90_70")
df_NC2_2$Context <- "NoContext"
df_NC2_2$Context <- as.factor(as.character(df_NC2_2$Context))
df_NC2_2 <- df_NC2_2[-c(1,2), ]
df_All_2 <- rbind(df_C2_2, df_NC2_2)
df_All2_2 <- melt(df_All, id=c("Subject","Context"))
names(df_All2_2)[names(df_All2_2)=="variable"] <- "Trial"
names(df_All2_2)[names(df_All2_2)=="value"] <- "Response"
df_All2_2$Response2 <- as.factor(ifelse(df_All2_2$Trial == "circle100_60" & df_All2_2$Response == 1, "100",
ifelse(df_All2_2$Trial == "circle100_60" & df_All2_2$Response == 2, "60",
ifelse(df_All2_2$Trial == "circle100_60" & df_All2_2$Response == 3, "Neither",
ifelse(df_All2_2$Trial == "circle90_70" & df_All2_2$Response == 1, "70",
ifelse(df_All2_2$Trial == "circle90_70" & df_All2_2$Response == 2, "90",
ifelse(df_All2_2$Trial == "circle90_70" & df_All2_2$Response == 3, "Neither",
ifelse(df_All2_2$Trial == "ring100_60" & df_All2_2$Response == 1, "100",
ifelse(df_All2_2$Trial == "ring100_60" & df_All2_2$Response == 2, "60",
ifelse(df_All2_2$Trial == "ring100_60" & df_All2_2$Response == 4, "60",
ifelse(df_All2_2$Trial == "ring100_60" & df_All2_2$Response == 3, "Neither",
ifelse(df_All2_2$Trial == "ring100_60" & df_All2_2$Response == 5, "Neither",
ifelse(df_All2_2$Trial == "ring90_70" & df_All2_2$Response == 1, "70",
ifelse(df_All2_2$Trial == "ring90_70" & df_All2_2$Response == 2, "90",
ifelse(df_All2_2$Trial == "ring90_70" & df_All2_2$Response == 4, "90",
ifelse(df_All2_2$Trial == "ring90_70" & df_All2_2$Response == 3, "Neither",
ifelse(df_All2_2$Trial == "ring90_70" & df_All2_2$Response == 5, "Neither", "Error")))))))))))))))))
df_All2_2$Subject <- as.factor(df_All2_2$Subject)
df_All2_2$Response3 <- ifelse(df_All2_2$Response2 == "Neither", 1, 0)
df_All2_2$Response4 <- ifelse(df_All2_2$Response2 == "100", 1, 0)
df_All2_2$Response5 <- ifelse(df_All2_2$Response2 == "100" | df_All2_2$Response2 == "90", 1, 0)
df_All2_2$Trial2 <- as.factor(ifelse(df_All2_2$Trial  == "ring90_70" | df_All2_2$Trial  == "circle90_70"  , "9070", "10060"))
df_All2_2$Experiment <- as.factor("2")
allData <- rbind(df_All2, df_All2_2)
myC = function(x) { return(scale(x, scale=F)) }
prepVars = function(d) {
d$Context = factor(d$Context, levels=c("WithContext","NoContext"))
d$Trial2 = factor(d$Trial2, levels=c("9070","10060"))
d$Experiment = factor(d$Experiment, levels=c("1","2"))
contrasts(d$Context) = contr.sum(2)
contrasts(d$Trial2) = contr.sum(2)
contrasts(d$Experiment) = contr.sum(2)
d$cContext = myC(ifelse(d$Context == "WithContext", 1, 0))
d$cTrial2= myC(ifelse(d$Trial2 == "9070", 1, 0))
d$cExperiment = myC(ifelse(d$Experiment == "1", 1, 0))
return(d)
}
M1 <- glmer(Response3 ~ cContext * cTrial2 * cExperiment +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(allData))
)
summary(M1)
M2 <- glmer(Response5 ~ cContext * cTrial2 + cExperiment +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(allData))
)
summary(M2)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(allData))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
prepVars = function(d) {
d$Context = factor(d$Context, levels=c("WithContext","NoContext"))
d$Trial2 = factor(d$Trial2, levels=c("10060","9070"))
d$Experiment = factor(d$Experiment, levels=c("1","2"))
contrasts(d$Context) = contr.sum(2)
contrasts(d$Trial2) = contr.sum(2)
contrasts(d$Experiment) = contr.sum(2)
d$cContext = myC(ifelse(d$Context == "WithContext", 1, 0))
d$cTrial2= myC(ifelse(d$Trial2 == "10060", 1, 0))
d$cExperiment = myC(ifelse(d$Experiment == "1", 1, 0))
return(d)
}
M1 <- glmer(Response4 ~ cContext * cTrial2 +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 + Response4
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(df_All2))
)
M1 <- glmer(Response3 ~ cContext * cTrial2 + Response4 +
(1 | Subject) +
(1 | Trial),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 +
(1 | Subject),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 * cExperiment +
(1 | Subject),
family="binomial",
data=subset(prepVars(allData))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 + cExperiment +
(1 | Subject),
family="binomial",
data=subset(prepVars(allData))
)
summary(M1)
M1 <- glmer(Response4 ~ cContext * cTrial2 +
(1 | Subject),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
M1 <- glmer(Response3 ~ cContext * cTrial2 +
(1 | Subject),
family="binomial",
data=subset(prepVars(df_All2))
)
summary(M1)
aov100 <- aov(Response2 ~ Context*Trial2, data=allData)
summary(aov2)
summary(aov100)
aov100 <- aov(Response2 ~ Context*Trial2, data=allData)
summary(aov100)
aov_100 <- aov(Response2 ~ Context*Trial2, data=allData)
summary(aov_100)
View(allData)
aov_100 <- aov(Response4 ~ Context*Trial2, data=allData)
summary(aov_100)
aov_100 <- aov(Response4 ~ Context*Trial2 + Experiment, data=allData)
summary(aov_100)
model.tables(aov_100, "means")
aov_100 <- aov(Response4 ~ Context + Experiment, data=allData)
summary(aov_100)
model.tables(aov_100, "means")
aov_100 <- aov(Response4 ~ Context + Experiment, data=df_All2)
aov_100 <- aov(Response4 ~ Context, data=df_All2)
summary(aov_100)
model.tables(aov_100, "means")
install.packages("devtools")
devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
install.packages("stringr")
install.packages("devtools")
subjects <- read.csv("MPP2ET_Data.csv")
setwd('/Users/crystallee/Documents/Github/MannerPathPriming-2ET/Data')
subjects <- read.csv("MPP2ET_Data.csv")
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
trial_time1 <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
z1 = as.character(df_timestamps$point_description[y+1])
z2 <- paste(z1, z, sep=",")
#x <- cbind(x, newColumn = z2)
return(z2)
}
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
counter = 0 # Counter to load in dataframes for timestamps, probably will be unneeded in the future
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
############################
# LOOKING AT PRACTICE TRIALS
############################
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
for(i in subj.folders){
############################
# LOOKING AT MAIN TRIALS
############################
df_main <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_main){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_main <- rbind(df_main, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_main)[which(names(df_main) == "description")] <- "trialNo"
df_main$L_valid <- as.factor(df_main$L_valid)
df_main$R_valid <- as.factor(df_main$R_valid)
df_main$system_time_stamp <- df_main$system_time_stamp - 1500000000000000
df_main$phase <- 'Main'
# Merging together dat_table and trials to get correctness
df_main$trialNo <- as.factor(ifelse(df_main$trialNo == "All_of_noBias_trial_1", "1",
ifelse(df_main$trialNo == "All_of_noBias_trial_2", "2",
ifelse(df_main$trialNo == "All_of_noBias_trial_3", "3",
ifelse(df_main$trialNo == "All_of_noBias_trial_4", "4",
ifelse(df_main$trialNo == "All_of_Main_trial_5", "5",
ifelse(df_main$trialNo == "All_of_Main_trial_6", "6",
ifelse(df_main$trialNo == "All_of_Main_trial_7", "7",
ifelse(df_main$trialNo == "All_of_Main_trial_8", "8", "Error")))))))))
subjData <- rbind(subjData, df_main)
}
for(i in subj.folders){
##########################
# LOOKING AT EXTEND TRIALS
##########################
# Reading in extend trial CSVs
df_extend <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
for(file in file.names_extend){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
if("trialNo" %in% colnames(temp)) {
temp <- subset(temp, select=-c(trialNo))
}
df_extend <-rbind(df_extend, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_extend)[which(names(df_extend) == "description")] <- "trialNo"
df_extend$L_valid <- as.factor(df_extend$L_valid)
df_extend$R_valid <- as.factor(df_extend$R_valid)
df_extend$system_time_stamp <- df_extend$system_time_stamp - 1500000000000000
df_extend$phase <- 'Extend'
# Merging together dat_table and trials to get correctness
df_extend$trialNo <- as.factor(ifelse(df_extend$trialNo == "All_of_Extend_trial_5", "13",
ifelse(df_extend$trialNo == "All_of_Extend_trial_6", "14",
ifelse(df_extend$trialNo == "All_of_Extend_trial_7", "7",
ifelse(df_extend$trialNo == "All_of_Extend_trial_8", "8",
ifelse(df_extend$trialNo == "All_of_Extend_trial_1", "9",
ifelse(df_extend$trialNo == "All_of_Extend_trial_2", "10",
ifelse(df_extend$trialNo == "All_of_Extend_trial_3", "11",
ifelse(df_extend$trialNo == "All_of_Extend_trial_4", "12", "Error")))))))))
subjData <- rbind(subjData, df_extend)
}
colnames(df_data_table)[1] <- c("subjectID")
df_data_table$trialNo <- as.factor(df_data_table$trialNo)
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
allData <- dplyr::full_join(subjData, df_data_table, by=c("subjectID", "trialNo"))
allData$subjectID <- as.factor(allData$subjectID)
allData$Trackloss_column <- ifelse(allData$L_valid == '1' & allData$R_valid == '1', FALSE,
ifelse(allData$L_valid == '0' & allData$R_valid == '1', TRUE,
ifelse(allData$L_valid == '1' & allData$R_valid == '0', TRUE,
ifelse(allData$L_valid == '0' & allData$R_valid == '0', TRUE, 'Error'))))
allData$Trackloss_column <- as.logical(allData$Trackloss_column)
allData$X <- rowMeans(subset(allData, select = c(6, 9)), na.rm = TRUE)
allData$Y <- rowMeans(subset(allData, select = c(7, 10)), na.rm = TRUE)
a <- lapply(allData$system_time_stamp, trial_time)
allData$Trial_description <- a
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
install.packages("stringr")
library("stringr")
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookMannerBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" &pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> df_practice_test
df_practice_test$lookPractice <- as.logical(df_practice_test$lookPractice)
df_practice_test$subjectID <- as.factor(df_practice_test$subjectID)
df_practice_test$Trackloss_column <- ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '1', FALSE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '1', TRUE,
ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '0', TRUE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '0', TRUE, 'Error'))))
df_practice_test$Trackloss_column <- as.logical(df_practice_test$Trackloss_column)
data <- make_eyetrackingr_data(df_practice_test,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = "lookPractice",
treat_non_aoi_looks_as_missing = FALSE
)
response_window_agg_by_sub_practice <- make_time_window_data(data, aois = "lookPractice", summarize_by = c("Condition"))
response_window_agg_by_sub_practice$Condition[response_window_agg_by_sub_practice$subjectID == "pilot_0725"] <- "Path"
response_window_agg_by_sub_practice <- response_window_agg_by_sub_practice[-c(3),]
allMain_test <- filter(allData, phase=="Main")
allMain_test <- allMain_test[grep("testVideos|biasTest", allMain_test$Trial_description),]
allMain_test <- allMain_test[!duplicated(allMain_test),]
data <- make_eyetrackingr_data(allMain_test,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerBias", "lookMannerTest", "lookPathBias", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
response_window_agg_by_sub_main <- make_time_window_data(data, aois = c("lookMannerBias", "lookMannerTest", "lookPathBias", "lookPathTest"), summarize_by = c("Condition"))
response_window_agg_by_sub_main$phase <- ifelse(response_window_agg_by_sub_main$AOI == "lookMannerBias" | response_window_agg_by_sub_main$AOI == "lookPathBias", "Bias Test",
ifelse(response_window_agg_by_sub_main$AOI == "lookMannerTest" | response_window_agg_by_sub_main$AOI == "lookPathTest", "Verb Test", "Error"))
allExtend <- filter(allData, phase=="Extend")
allExtend <- allExtend[grep("biasTest_Extend", allExtend$Trial_description),]
allExtend <- allExtend[!duplicated(allExtend),]
data <- make_eyetrackingr_data(allExtend,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookActionBias"),
treat_non_aoi_looks_as_missing = FALSE
)
response_window_agg_by_sub_extend <- make_time_window_data(data, aois = c("lookActionBias"), summarize_by = c("Condition"))
View(response_window_agg_by_sub_practice)
contrasts(allData$Condition) = contr.sum(2)
View(allData)
contrasts(allData$lookMannerBias) = contr.sum(2)
M1 <- glmer(lookMannerBias ~ Condition +
(1 | subjectID),
family="binomial",
data=allData)
M1
summary(M1)
M1 <- glmer(lookActionBias ~ Condition + lookMannerBias
(1 | subjectID),
family="binomial",
data=allData)
M1 <- glmer(lookActionBias ~ Condition + lookMannerBias +
(1 | subjectID),
family="binomial",
data=allData)
contrasts(allData$lookActionBias) = contr.sum(2)
M1 <- glmer(lookActionBias ~ Condition + lookMannerBias +
(1 | subjectID),
family="binomial",
data=allData)
summary(M1)
table(allData$lookActionBias)
