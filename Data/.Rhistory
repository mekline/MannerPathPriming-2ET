load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace.RData")
View(df_practice_test)
View(df_timestamps)
load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace.RData")
View(df_data_table)
View(temp)
load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot2.RData")
load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot1.RData")
load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot2.RData")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
setwd('/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Data')
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
# Declaring an empty df to append to
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
# Declaring my function
## Declaring function trial_time, where a is a given value and f a timestamp
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
## search for the maximum timestamp where the timestamp is equal to or less than value a
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
## if the vector is empty, return the timestamp of the minimum value bigger than a,
## if the vector is not empty, return the vector
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
# This function returns an array of both the start and end portions of the current trial
# (e.g., "Start Trial 7, AmbigVideo 7" (or whatever)), but it gives me an error. So, I'm including
# the code incase anyone wants to use it later.
# trial_time1 <- function(x) {
#
#   f = df_timestamps$system_time_stamp
#   a = x
#   maxless <- max(f[f <= a])
#   # find out which value that is
#   y = which(f == maxless)
#   z = as.character(df_timestamps$point_description[y])
#
#   z1 = as.character(df_timestamps$point_description[y+1])
#   z2 <- paste(z1, z, sep=",")
#
#   #x <- cbind(x, newColumn = z2)
#
#   return(z2)
# }
############################
# LOOPING THROUGH ALL THE SUBJECTS (1 subject at a time)
############################
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Getting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
############################
# LOOKING AT PRACTICE TRIALS
############################
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
## makes an empty data frame
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eye-tracking data of the practice runs in the data frame
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
############################
# LOOKING AT MAIN TRIALS
############################
for(i in subj.folders){
## making an empty data frame
df_main <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data for the main trials in the data frame
for(file in file.names_main){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_main <- rbind(df_main, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_main)[which(names(df_main) == "description")] <- "trialNo"
df_main$L_valid <- as.factor(df_main$L_valid)
df_main$R_valid <- as.factor(df_main$R_valid)
df_main$system_time_stamp <- df_main$system_time_stamp - 1500000000000000
df_main$phase <- 'Main'
# Merging together dat_table and trials to get correctness
df_main$trialNo <- as.factor(ifelse(df_main$trialNo == "All_of_noBias_trial_1", "1",
ifelse(df_main$trialNo == "All_of_noBias_trial_2", "2",
ifelse(df_main$trialNo == "All_of_noBias_trial_3", "3",
ifelse(df_main$trialNo == "All_of_noBias_trial_4", "4",
ifelse(df_main$trialNo == "All_of_Main_trial_5", "5",
ifelse(df_main$trialNo == "All_of_Main_trial_6", "6",
ifelse(df_main$trialNo == "All_of_Main_trial_7", "7",
ifelse(df_main$trialNo == "All_of_Main_trial_8", "8", "Error")))))))))
## adds practice data and main trials data together in one data frame
subjData <- rbind(subjData, df_main)
}
##########################
# LOOKING AT EXTEND TRIALS
##########################
for(i in subj.folders){
# Reading in extend trial CSVs
## making an empty data frame
df_extend <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data of the extend trials in the data frame
for(file in file.names_extend){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
if("trialNo" %in% colnames(temp)) {
temp <- subset(temp, select=-c(trialNo))
}
df_extend <-rbind(df_extend, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_extend)[which(names(df_extend) == "description")] <- "trialNo"
df_extend$L_valid <- as.factor(df_extend$L_valid)
df_extend$R_valid <- as.factor(df_extend$R_valid)
df_extend$system_time_stamp <- df_extend$system_time_stamp - 1500000000000000
df_extend$phase <- 'Extend'
# Merging together dat_table and trials to get correctness
df_extend$trialNo <- as.factor(ifelse(df_extend$trialNo == "All_of_Extend_trial_5", "13",
ifelse(df_extend$trialNo == "All_of_Extend_trial_6", "14",
ifelse(df_extend$trialNo == "All_of_Extend_trial_7", "7",
ifelse(df_extend$trialNo == "All_of_Extend_trial_8", "8",
ifelse(df_extend$trialNo == "All_of_Extend_trial_1", "9",
ifelse(df_extend$trialNo == "All_of_Extend_trial_2", "10",
ifelse(df_extend$trialNo == "All_of_Extend_trial_3", "11",
ifelse(df_extend$trialNo == "All_of_Extend_trial_4", "12", "Error")))))))))
subjData <- rbind(subjData, df_extend)
}
memory.limit()
memory.limit(20000)
colnames(df_data_table)[1] <- c("subjectID")
df_data_table$trialNo <- as.factor(df_data_table$trialNo)
# Reformatting timestamps
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
# Merging data table with allData
allData <- dplyr::full_join(subjData, df_data_table, by=c("subjectID", "trialNo"))
# Reformatting allData
allData$subjectID <- as.factor(allData$subjectID)
# Defining a trackloss column
allData$Trackloss_column <- ifelse(allData$L_valid == '1' & allData$R_valid == '1', FALSE,
ifelse(allData$L_valid == '0' & allData$R_valid == '1', TRUE,
ifelse(allData$L_valid == '1' & allData$R_valid == '0', TRUE,
ifelse(allData$L_valid == '0' & allData$R_valid == '0', TRUE, 'Error'))))
allData$Trackloss_column <- as.logical(allData$Trackloss_column)
# Averaging together L and R eyes
allData$X <- rowMeans(subset(allData, select = c(6, 9)), na.rm = TRUE)
allData$Y <- rowMeans(subset(allData, select = c(7, 10)), na.rm = TRUE)
a <- lapply(allData$system_time_stamp, trial_time)
save.image("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot12.RData")
a <- lapply(allData$system_time_stamp, trial_time)
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) %>%
mutate(lookNotPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
# Adding AOI for Manner Bias and Test Bias
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookMannerBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
# Adding AOI for Path Bias and Test Bias
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" &pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" &mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
# Adding AOI for Generalization Test
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
a <- lapply(allPractice$system_time_stamp, trial_time)
allPractice$Trial_description <- a
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> df_practice_test
df_practice_test$lookPractice <- as.logical(df_practice_test$lookPractice)
# Reformatting allData
df_practice_test$subjectID <- as.factor(df_practice_test$subjectID)
# Defining a trackloss column
df_practice_test$Trackloss_column <- ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '1', FALSE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '1', TRUE,
ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '0', TRUE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '0', TRUE, 'Error'))))
df_practice_test$Trackloss_column <- as.logical(df_practice_test$Trackloss_column)
# Defining column for looks to anything other than the AOI's
df_practice_test$lookNotAOI <- ifelse(df_practice_test$Trackloss_column == "FALSE" & df_practice_test$lookPractice == "FALSE" & df_practice_test$lookNotPractice == "FALSE", TRUE, FALSE)
# Starting to use eyetrackingR
data_practice <- make_eyetrackingr_data(df_practice_test,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice", "lookNotAOI"),
treat_non_aoi_looks_as_missing = FALSE
)
data_practice <- data_practice %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_practice <- make_eyetrackingr_data(data_practice,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice", "lookNotAOI"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_practice <- subset_by_window(data_practice, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.2 seconds)
response_time_practice <- make_time_sequence_data(response_window_practice, time_bin_size = 200000,
#predictor_columns = c("Condition"),
aois = c("lookPractice", "lookNotPractice", "lookNotAOI")
)
plot_practice_mean <- response_time_practice %>%
group_by(AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')%>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_trial <- response_time_practice %>%
group_by(AOI, TimeBin, trialNo) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
plot_practice_ind <- response_time_practice %>%
group_by(subjectID, AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
# plot data for the mean
ggplot(plot_practice_mean, aes(x=TimeBin, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line()
# plot data per individual
ggplot(plot_practice_ind, aes(x=TimeBin, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line()
# plot data per trial
ggplot(plot_practice_trial, aes(x=TimeBin, y=meanProp, color = AOI)) +
facet_wrap(~trialNo) +
geom_line()
# Analysing trackloss data practice trials
tl_practice_analysis <- trackloss_analysis(data_practice)
ggplot(tl_practice_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot()
# Creating bar graph
# Aggregating by subjectID to get a proportion of looks to screen by AOI
response_window_agg_by_sub_practice <- make_time_window_data(data_practice, aois = c("lookPractice", "lookNotPractice", "lookNotAOI"), summarize_by = c("subjectID"))
ggplot(data=response_window_agg_by_sub_practice, aes(x=AOI, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
plot_practice_mean_ind <- response_time_practice %>%
group_by(AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
ggplot(plot_practice_mean_ind, aes(x=AOI, y=meanProp, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="identity", position=position_dodge())
allMain <- filter(allData, phase=="Main")
a <- lapply(allMain$system_time_stamp, trial_time)
allMain_test <- filter(allData, phase=="Main")
allMain_test <- allMain
allMain_test <- allMain
a <- lapply(allMain_test$system_time_stamp, trial_time)
allMain_test$Trial_description <- a
allMain_test_noBias <- allMain_test[grep("testVideos", allMain_test$Trial_description),]
allMain_test_noBias$trialNo <- as.factor(allMain_test_noBias$trialNo)
allMain_test_noBias$lookMannerTest <- as.logical(allMain_test_noBias$lookMannerTest)
allMain_test_noBias$lookPathTest <- as.logical(allMain_test_noBias$lookPathTest)
allMain_test_noBias$system_time_stamp <- as.numeric(allMain_test_noBias$system_time_stamp)
# IDK IF THIS IS KOSHER OR NOT
## only keep the unique rows from the input
allMain_test_noBias %>%
distinct(trialNo, system_time_stamp, .keep_all = TRUE) -> allMain_test_noBias
# Starting to use eyetrackingR
data_noBias <- make_eyetrackingr_data(allMain_test_noBias,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# Cleaning data with 25% trackloss
response_window_clean_noBias <- clean_by_trackloss(data = data_noBias, trial_prop_thresh = .25)
# all main test videos, without bias
allMain_test_noBias <- allMain_test[grep("testVideos", allMain_test$Trial_description),]
allMain_test_noBias$trialNo <- as.factor(allMain_test_noBias$trialNo)
allMain_test_noBias$lookMannerTest <- as.logical(allMain_test_noBias$lookMannerTest)
allMain_test_noBias$lookPathTest <- as.logical(allMain_test_noBias$lookPathTest)
allMain_test_noBias$system_time_stamp <- as.numeric(allMain_test_noBias$system_time_stamp)
mem.limits()
memory.limit()
memory.limit(50000)
allMain_test_noBias <- allMain_test[grep("testVideos", allMain_test$Trial_description),]
allMain_test_noBias$trialNo <- as.factor(allMain_test_noBias$trialNo)
allMain_test_noBias$lookMannerTest <- as.logical(allMain_test_noBias$lookMannerTest)
allMain_test_noBias$lookPathTest <- as.logical(allMain_test_noBias$lookPathTest)
allMain_test_noBias$system_time_stamp <- as.numeric(allMain_test_noBias$system_time_stamp)
allMain_test_noBias %>%
distinct(trialNo, system_time_stamp, .keep_all = TRUE) -> allMain_test_noBias
data_noBias <- make_eyetrackingr_data(allMain_test_noBias,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# Cleaning data with 25% trackloss
response_window_clean_noBias <- clean_by_trackloss(data = data_noBias, trial_prop_thresh = .25)
data_noBias <- data_noBias %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_noBias <- make_eyetrackingr_data(data_noBias,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_noBias <- subset_by_window(data_noBias, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.3 seconds)
response_time_noBias <- make_time_sequence_data(response_window_noBias, time_bin_size = 300000,
predictor_columns = c("Condition"),
aois = c("lookMannerTest", "lookPathTest"),
summarize_by = "subjectID"
)
plot_noBias_mean <- response_time_noBias %>%
group_by(AOI, TimeBin, Condition) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')
ggplot(plot_noBias_mean, aes(x=TimeBin, y=meanProp, color = AOI)) +
facet_wrap(~Condition) +
geom_line()
response_window_agg_by_sub_noBias <- make_time_window_data(response_window_clean_noBias, aois = c("lookMannerBias", "lookPathBias"), predictor_columns=c("Condition"), summarize_by = c("subjectID"))
ggplot(data=response_window_agg_by_sub_noBias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
response_window_agg_by_sub_trialNo_noBias <- make_time_window_data(response_window_clean_noBias, aois = c("lookMannerBias", "lookPathBias"), predictor_columns=c("Condition"), summarize_by = c("subjectID", "trialNo"))
ggplot(data=response_window_agg_by_sub_trialNo_noBias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
facet_wrap(~trialNo) +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggplot(data=response_window_agg_by_sub_noBias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
View(response_window_agg_by_sub_noBias)
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot1_2_noBias_bar_AOI.png")
ggplot(data=response_window_agg_by_sub_trialNo_noBias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
facet_wrap(~trialNo) +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
save.image("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot12.RData")
