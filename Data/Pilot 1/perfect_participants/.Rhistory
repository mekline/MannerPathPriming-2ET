"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to glip down to the clown.", "The monster glipped down to the clown.", "The monster is going to glip down to the eagle.", "The monster glipped down to the eagle.", "The monster is going to glip down to the cow.", "The monster glipped down to the cow.", "The monster is going to glip down to the dog.", "The monster glipped down to the dog.", "Which one is glipping?", "Let's find glipping."),
"File" = c("glipping_path_future_clown.wav", "glipping_path_past_clown.wav", "glipping_path_future_eagle.wav", "glipping_path_past_eagle.wav", "glipping_path_future_cow.wav", "glipping_path_past_cow.wav", "glipping_path_future_dog.wav", "glipping_path_past_dog.wav", "which_glipping.wav", "letsfindglipping.wav"))
# Zarking manner
zarkingM <- data.frame("Verb" = rep("zarking"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to zark up to the cat.", "The monster zarked up to the cat.", "The monster is going to zark in front of the penguin.", "The monster zarked in front of the penguin.", "The monster is going to zark between the seesaws.", "The monster zarked between the seesaws.", "The monster is going to zark through the waterfall.", "The monster zarked through the waterfall.", "Which one is zarking?", "Let's find zarking."),
"File" = c("zarking_manner_future_cat.wav", "zarking_manner_past_cat.wav", "zarking_manner_future_penguin.wav", "zarking_manner_past_penguin.wav", "zarking_manner_future_seesaws.wav", "zarking_manner_past_seesaws.wav", "zarking_manner_future_waterfall.wav", "zarking_manner_past_waterfall.wav", "which_zarking.wav", "letsfindzarking.wav"))
# Zarking path
zarkingP <- data.frame("Verb" = rep("zarking"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to zark up to the cat.", "The monster zarked up to the cat.", "The monster is going to zark up to the owl.", "The monster zarked up to the owl.", "The monster is going to zark up to the snowman.", "The monster zarked up to the snowman.", "The monster is going to zark up to the monkey.", "The monster zarked up to the monkey.", "Which one is zarking?", "Let's find zarking."),
"File" = c("zarking_path_future_cat.wav", "zarking_path_past_cat.wav", "zarking_path_future_owl.wav", "zarking_path_past_owl.wav", "zarking_path_future_snowman.wav", "zarking_path_past_snowman.wav", "zarking_path_future_monkey.wav", "zarking_path_past_monkey.wav", "which_zarking.wav", "letsfindzarking.wav"))
# Molking manner
molkingM <- data.frame("Verb" = rep("molking"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to molk around the penguin.", "The monster molked around the penguin.", "The monster is going to molk over the book.", "The monster molked over the book.", "The monster is going to molk through the tree.", "The monster molked through the tree.", "The monster is going to molk between the snowmen.", "The monster molked between the snowmen.", "Which one is molking?", "Let's find molking."),
"File" = c("molking_manner_future_penguin.wav", "molking_manner_past_penguin.wav", "molking_manner_future_book.wav", "molking_manner_past_book.wav", "molking_manner_future_tree.wav", "molking_manner_past_tree.wav", "molking_manner_future_snowmen.wav", "molking_manner_past_snowmen.wav", "which_molking.wav", "letsfindmolking.wav"))
# Molking path
molkingP <- data.frame("Verb" = rep("molking"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to molk around the penguin.", "The monster molked around the penguin.", "The monster is going to molk around the spaceship.", "The monster molked around the spaceship.", "The monster is going to molk around the fountain.", "The monster molked around the fountain.", "The monster is going to molk around the drum.", "The monster molked around the drum.", "Which one is molking?", "Let's find molking."),
"File" = c("molking_path_future_penguin.wav", "molking_path_past_penguin.wav", "molking_path_future_spaceship.wav", "molking_path_past_spaceship.wav", "molking_path_future_fountain.wav", "molking_path_past_fountain.wav", "molking_path_future_drum.wav", "molking_path_past_drum.wav", "which_molking.wav", "letsfindmolking.wav"))
# Torging manner
torgingM <- data.frame("Verb" = rep("torging"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to torg between the trees.", "The monster torged between the trees.", "The monster is going to torg down to the eagle.", "The monster torged down to the eagle.", "The monster is going to torg up to the snowman.", "The monster torged up to the snowman.", "The monster is going to torg around the drum.", "The monster torged around the drum.", "Which one is torging?", "Let's find torging."),
"File" = c("torging_manner_future_trees.wav", "torging_manner_past_trees.wav", "torging_manner_future_eagle.wav", "torging_manner_past_eagle.wav", "torging_manner_future_snowman.wav", "torging_manner_past_snowman.wav", "torging_manner_future_drum.wav", "torging_manner_past_drum.wav", "which_torging.wav", "letsfindtorging.wav"))
# Torging path
torgingP <- data.frame("Verb" = rep("torging"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to torg between the trees.", "The monster torged between the trees.", "The monster is going to torg between the mailboxes.", "The monster torged between the mailboxes.", "The monster is going to torg between the seesaws.", "The monster torged between the seesaws.", "The monster is going to torg between the snowmen.", "The monster torged between the snowmen.", "Which one is torging?", "Let's find torging."),
"File" = c("torging_path_future_trees.wav", "torging_path_past_trees.wav", "torging_path_future_mailboxes.wav", "torging_path_past_mailboxes.wav", "torging_path_future_seesaws.wav", "torging_path_past_seesaws.wav", "torging_path_future_snowmen.wav", "torging_path_past_snowmen.wav", "which_torging.wav", "letsfindtorging.wav"))
# Pimming manner
pimmingM <- data.frame("Verb" = rep("pimming"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to pim through the flowers.", "The monster pimmed through the flowers.", "The monster is going to pim into the barn.", "The monster pimmed into the barn.", "The monster is going to pim around the fountain.", "The monster pimmed around the fountain.", "The monster is going to pim up to the monkey.", "The monster pimmed up to the monkey.", "Which one is pimming?", "Let's find pimming."),
"File" = c("pimming_manner_future_flowers.wav", "pimming_manner_past_flowers.wav", "pimming_manner_future_barn.wav", "pimming_manner_past_barn.wav", "pimming_manner_future_fountain.wav", "pimming_manner_past_fountain.wav", "pimming_manner_future_monkey.wav", "pimming_manner_past_monkey.wav", "which_pimming.wav", "letsfindpimming.wav"))
# Pimming path
pimmingP <- data.frame("Verb" = rep("pimming"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to pim through the flowers.", "The monster pimmed through the flowers.", "The monster is going to pim through the tunnel .", "The monster pimmed through the tunnel.", "The monster is going to pim through the tree.", "The monster pimmed through the tree.", "The monster is going to pim through the waterfall.", "The monster pimmed through the waterfall.", "Which one is pimming?", "Let's find pimming."),
"File" = c("pimming_path_future_flowers.wav", "pimming_path_past_flowers.wav", "pimming_path_future_tunnel.wav", "pimming_path_past_tunnel.wav", "pimming_path_future_trees.wav", "pimming_path_past_trees.wav", "pimming_path_future_waterfall.wav", "pimming_path_past_waterfall.wav", "which_pimming.wav", "letsfindpimming.wav"))
# Birking manner
birkingM <- data.frame("Verb" = rep("birking"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to birk over the cone.", "The monster birked over the cone.", "The monster is going to birk around the spaceship.", "The monster birked around the spaceship.", "The monster is going to birk down to the dog.", "The monster birked down to the dog.", "The monster is going to birk into the spaceship.", "The monster birked into the spaceship.", "Which one is birking?", "Let's find birking."),
"File" = c("birking_manner_future_cone.wav", "birking_manner_past_cone.wav", "birking_manner_future_spaceship.wav", "birking_manner_past_spaceship.wav", "birking_manner_future_dog.wav", "birking_manner_past_dog.wav", "birking_manner_future_spaceship2.wav", "birking_manner_past_spaceship2.wav", "which_birking.wav", "letsfindbirking.wav"))
# Birking path
birkingP <- data.frame("Verb" = rep("birking"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to birk over the cone.", "The monster birked over the cone.", "The monster is going to birk over the book.", "The monster birked over the book.", "The monster is going to birk over the tires.", "The monster birked over the tires.", "The monster is going to birk over the mountain.", "The monster birked over the mountain.", "Which one is birking?", "Let's find birking."),
"File" = c("birking_path_future_cone.wav", "birking_path_past_cone.wav", "birking_path_future_book.wav", "birking_path_past_book.wav", "birking_path_future_tires.wav", "birking_path_past_tires.wav", "birking_path_future_mountain.wav", "birking_path_past_mountain.wav", "which_birking.wav", "letsfindbirking.wav"))
# Dacking manner
dackingM <- data.frame("Verb" = rep("dacking"),
"Condition" = rep("Manner"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to dack in front of the elephant.", "The monster dacked in front of the elephant.", "The monster is going to dack into the castle.", "The monster dacked into the castle.", "The monster is going to dack down to the cow.", "The monster dacked down to the cow.", "The monster is going to dack up to the owl.", "The monster dacked up to the owl.", "Which one is dacking?", "Let's find dacking."),
"File" = c("dacking_manner_future_elephant.wav", "dacking_manner_past_elephant.wav", "dacking_manner_future_castle.wav", "dacking_manner_past_castle.wav", "dacking_manner_future_cow.wav", "dacking_manner_past_cow.wav", "dacking_manner_future_owl.wav", "dacking_manner_past_owl.wav", "which_dacking.wav", "letsfinddacking.wav"))
# Dacking path
dackingP <- data.frame("Verb" = rep("dacking"),
"Condition" = rep("Path"),
"Type" = c("ambig", "ambig", "train1", "train1", "train2", "train2", "train3", "train3", "question1", "question2"),
"Version" = c("future", "past", "future", "past", "future", "past", "future", "past", "which one", "let's find"),
"Text" = c("The monster is going to dack in front of the elephant.", "The monster dacked in front of the elephant.", "The monster is going to dack in front of the penguin.", "The monster dacked in front of the penguin.", "The monster is going to dack in front of the bench.", "The monster dacked in front of the bench.", "The monster is going to dack in front of the bell.", "The monster dacked in front of the bell.", "Which one is dacking?", "Let's find dacking."),
"File" = c("dacking_path_future_elephant.wav", "dacking_path_past_elephant.wav", "dacking_path_future_penguin.wav", "dacking_path_past_penguin.wav", "dacking_path_future_bench.wav", "dacking_path_past_bench.wav", "dacking_path_future_bell.wav", "dacking_path_past_bell.wav", "which_dacking.wav", "letsfinddacking.wav"))
# Combine
MPP_sounds <- rbind(kradingM, glippingM, zarkingM, molkingM, torgingM, pimmingM, birkingM, dackingM, kradingP, glippingP, zarkingP, molkingP, torgingP, pimmingP, birkingP, dackingP)
View(MPP_sounds)
write.csv(file=MPP_sounds, x=MPP_sounds)
# Save as .csv
write.csv(MPP_sounds, file = "d:/d; Documenten/Studies/ReMa Linguistics/Internship/AnalysisMPP_sounds.csv", row.names = FALSE)
# Save as .csv
write.csv(MPP_sounds, file = "d:/d; Documenten/Studies/ReMa Linguistics/Internship/Analysis/MPP_sounds.csv", row.names = FALSE)
?write.cvs
?write.csv
# Save as .csv
write.csv(MPP_sounds, file = "d:/d; Documenten/Studies/ReMa Linguistics/Internship/Analysis/MPP_sounds.csv", row.names = FALSE, col.names = FALSE)
# Save as .csv
write.csv(MPP_sounds, file = "d:/d; Documenten/Studies/ReMa Linguistics/Internship/Analysis/MPP_sounds.csv")
ggplot(plot_practice_mean, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggplot(plot_practice_mean_ind_half_sum, aes(x=AOI, y=mean_prop, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_prop-ME_prop, ymax=mean_prop+ME_prop), width=0.2, position=position_dodge(.9))  +
ylab("Proportion of looks to correct video") +
ggtitle("Looks to practice trials per quarter") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=12),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
plot_practice_mean_ind_half_sum <- plot_practice_mean_ind_half %>%
dplyr::group_by(AOI, bigTimeBin) %>%   # the grouping variable
summarise(mean_prop = mean(meanProp),  # calculates the mean of each group
sd_prop = sd(meanProp), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(meanProp)/sqrt(n())) # calculates the standard error of each group
# Calculate s
ggplot(plot_practice_mean_ind_sum, aes(x=AOI, y=mean_prop, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_prop-ME_prop, ymax=mean_prop+ME_prop), width=0.2, position=position_dodge(.9)) +
ylab("Proportion of looks to correct video")  +
ggtitle("Looks to practice trials per quarter") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=12),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggplot(data=response_window_agg_by_sub_practice_half_sum, aes(x=AOI, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_prop-ME_prop, ymax=mean_prop+ME_prop), width=0.2) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
load("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_perfect.RData")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
setwd('/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Data/perfect_participants')
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
## search for the maximum timestamp where the timestamp is equal to or less than value a
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
## if the vector is empty, return the timestamp of the minimum value bigger than a,
## if the vector is not empty, return the vector
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Getting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
## makes an empty data frame
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eye-tracking data of the practice runs in the data frame
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
for(i in subj.folders){
## making an empty data frame
df_main <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data for the main trials in the data frame
for(file in file.names_main){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_main <- rbind(df_main, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_main)[which(names(df_main) == "description")] <- "trialNo"
df_main$L_valid <- as.factor(df_main$L_valid)
df_main$R_valid <- as.factor(df_main$R_valid)
df_main$system_time_stamp <- df_main$system_time_stamp - 1500000000000000
df_main$phase <- 'Main'
# Merging together dat_table and trials to get correctness
df_main$trialNo <- as.factor(ifelse(df_main$trialNo == "All_of_noBias_trial_1", "1",
ifelse(df_main$trialNo == "All_of_noBias_trial_2", "2",
ifelse(df_main$trialNo == "All_of_noBias_trial_3", "3",
ifelse(df_main$trialNo == "All_of_noBias_trial_4", "4",
ifelse(df_main$trialNo == "All_of_Main_trial_5", "5",
ifelse(df_main$trialNo == "All_of_Main_trial_6", "6",
ifelse(df_main$trialNo == "All_of_Main_trial_7", "7",
ifelse(df_main$trialNo == "All_of_Main_trial_8", "8", "Error")))))))))
## adds practice data and main trials data together in one data frame
subjData <- rbind(subjData, df_main)
}
for(i in subj.folders){
# Reading in extend trial CSVs
## making an empty data frame
df_extend <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data of the extend trials in the data frame
for(file in file.names_extend){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
if("trialNo" %in% colnames(temp)) {
temp <- subset(temp, select=-c(trialNo))
}
df_extend <-rbind(df_extend, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_extend)[which(names(df_extend) == "description")] <- "trialNo"
df_extend$L_valid <- as.factor(df_extend$L_valid)
df_extend$R_valid <- as.factor(df_extend$R_valid)
df_extend$system_time_stamp <- df_extend$system_time_stamp - 1500000000000000
df_extend$phase <- 'Extend'
# Merging together dat_table and trials to get correctness
df_extend$trialNo <- as.factor(ifelse(df_extend$trialNo == "All_of_Extend_trial_5", "13",
ifelse(df_extend$trialNo == "All_of_Extend_trial_6", "14",
ifelse(df_extend$trialNo == "All_of_Extend_trial_7", "7",
ifelse(df_extend$trialNo == "All_of_Extend_trial_8", "8",
ifelse(df_extend$trialNo == "All_of_Extend_trial_1", "9",
ifelse(df_extend$trialNo == "All_of_Extend_trial_2", "10",
ifelse(df_extend$trialNo == "All_of_Extend_trial_3", "11",
ifelse(df_extend$trialNo == "All_of_Extend_trial_4", "12", "Error")))))))))
subjData <- rbind(subjData, df_extend)
}
colnames(df_data_table)[1] <- c("subjectID")
df_data_table$trialNo <- as.factor(df_data_table$trialNo)
# Reformatting timestamps
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
# Merging data table with allData
allData <- dplyr::full_join(subjData, df_data_table, by=c("subjectID", "trialNo"))
# Reformatting allData
allData$subjectID <- as.factor(allData$subjectID)
# Defining a trackloss column
allData$Trackloss_column <- ifelse(allData$L_valid == '1' & allData$R_valid == '1', FALSE,
ifelse(allData$L_valid == '0' & allData$R_valid == '1', TRUE,
ifelse(allData$L_valid == '1' & allData$R_valid == '0', TRUE,
ifelse(allData$L_valid == '0' & allData$R_valid == '0', TRUE, 'Error'))))
allData$Trackloss_column <- as.logical(allData$Trackloss_column)
# Averaging together L and R eyes
allData$X <- rowMeans(subset(allData, select = c(6, 9)), na.rm = TRUE)
allData$Y <- rowMeans(subset(allData, select = c(7, 10)), na.rm = TRUE)
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPractice = ifelse(phase == "Practice" & trialNo == "1" & X > 0.67, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X < 0.605, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X < 0.605, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X < 0.605, as.logical(TRUE), as.logical(FALSE)))))) %>%
mutate(lookNotPractice = ifelse(phase == "Practice" & trialNo == "1" & X < 0.605, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "2" & X > 0.67, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "3" & X > 0.67, as.logical(TRUE),
ifelse(phase == "Practice" & trialNo == "4" & X > 0.67, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookMannerBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
# Adding AOI for Path Bias and Test Bias
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
# Adding AOI for Generalization Test
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
# Applying it to the dataframe for trials, it's taking a long time, so we'll apply it in sections
a <- lapply(allPractice$system_time_stamp, trial_time)
allPractice$Trial_description <- a
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> df_practice_test
df_practice_test$lookPractice <- as.logical(df_practice_test$lookPractice)
# Reformatting allData
df_practice_test$subjectID <- as.factor(df_practice_test$subjectID)
# Defining a trackloss column
df_practice_test$Trackloss_column <- ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '1', FALSE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '1', TRUE,
ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '0', TRUE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '0', TRUE, 'Error'))))
df_practice_test$Trackloss_column <- as.logical(df_practice_test$Trackloss_column)
# Starting to use eyetrackingR
data_practice <- make_eyetrackingr_data(df_practice_test,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice"),
treat_non_aoi_looks_as_missing = FALSE
)
data_practice <- data_practice %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_practice <- make_eyetrackingr_data(data_practice,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_practice <- subset_by_window(data_practice, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.2 seconds)
response_time_practice <- make_time_sequence_data(response_window_practice, time_bin_size = 200000,
aois = c("lookPractice", "lookNotPractice")
)
# transforming microseconds to miliseconds
response_time_practice <- response_time_practice %>%
mutate(time_ms = Time/1000)
plot_practice_mean <- response_time_practice %>%
group_by(AOI, TimeBin, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')%>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_trial <- response_time_practice %>%
group_by(AOI, TimeBin, trialNo, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
plot_practice_ind <- response_time_practice %>%
group_by(subjectID, AOI, TimeBin, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
ggplot(plot_practice_mean, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggplot(plot_practice_ind, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line()
# plot data per trial in a line graph
ggplot(plot_practice_trial, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~trialNo) +
geom_line()
ggplot(plot_practice_ind, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line()
ggplot(plot_practice_trial, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~trialNo) +
geom_line()
tl_practice_analysis <- trackloss_analysis(data_practice)
ggplot(tl_practice_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot() +
ylab("Trackloss") +
xlab("Trial") +
ggtitle("Trackloss during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
response_window_agg_by_sub_practice <- make_time_window_data(data_practice, aois = c("lookPractice", "lookNotPractice"), summarize_by = c("subjectID"))
# Creating error bars
response_window_agg_by_sub_practice_sum <- response_window_agg_by_sub_practice %>%
dplyr::group_by(AOI) %>%   # the grouping variable
summarise(mean_prop = mean(Prop),  # calculates the mean of each group
sd_prop = sd(Prop), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(Prop)/sqrt(n())) # calculates the standard error of each group
# Calculate standard error of the mean (SEM)
response_window_agg_by_sub_practice_sum$SEM_prop <- response_window_agg_by_sub_practice_sum$sd_prop/sqrt(response_window_agg_by_sub_practice_sum$n_prop)
alpha <- 0.05 # for a (1.00-alpha)=95% confidence interval
response_window_agg_by_sub_practice_sum$ME_prop <- qt(1-alpha/2, df=response_window_agg_by_sub_practice_sum$n_prop)*response_window_agg_by_sub_practice_sum$SEM_prop
# Creating a bar graph for the proportion of looks to the correct video with 95% CI
ggplot(data=response_window_agg_by_sub_practice_sum, aes(x=AOI, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_prop-ME_prop, ymax=mean_prop+ME_prop), width=0.2) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks during practice") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
plot_practice_mean_ind <- response_time_practice %>%
group_by(AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
# Creating error bars
plot_practice_mean_ind_sum <- plot_practice_mean_ind %>%
dplyr::group_by(AOI, bigTimeBin) %>%   # the grouping variable
summarise(mean_prop = mean(meanProp),  # calculates the mean of each group
sd_prop = sd(meanProp), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(meanProp)/sqrt(n())) # calculates the standard error of each group
# Calculate standard error of the mean (SEM)
plot_practice_mean_ind_sum$SEM_prop <- plot_practice_mean_ind_sum$sd_prop/sqrt(plot_practice_mean_ind_sum$n_prop)
# Calculate margin of error for confidence interval
alpha <- 0.05 # for a (1.00-alpha)=95% confidence interval
plot_practice_mean_ind_sum$ME_prop <- qt(1-alpha/2, df=plot_practice_mean_ind_sum$n_prop)*plot_practice_mean_ind_sum$SEM_prop
# Make the bar graph
ggplot(plot_practice_mean_ind_sum, aes(x=AOI, y=mean_prop, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_prop-ME_prop, ymax=mean_prop+ME_prop), width=0.2, position=position_dodge(.9)) +
ylab("Proportion of looks to correct video")  +
ggtitle("Looks to practice trials per quarter") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=12),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
