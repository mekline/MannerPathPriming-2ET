if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
#Extend the paramfun contrasts of the critical task to measure them in lang and in MD!
allTests %>%
filter(Group == 'RHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
#Now the same, with LME for all parcels in the localizers
setwd(analysisfolder)
repodir = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis"
analysisfolder = paste(repodir, "/analysis_pipeline", sep="")
figfolder = paste(repodir, "/analysis_pipeline/figs", sep="")
E1folder = paste(repodir, "/E1_tabular_data", sep="")
setwd(analysisfolder)
#Load all the t tests (from E2)
allTests <- read.csv('localizer_t_tests_all.csv')
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
#S
allTests <- read.csv('jokes_t_tests_all.csv')
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(allSigChange)
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
#Extend the paramfun contrasts of the critical task to measure them in lang and in MD!
allTests %>%
filter(Group == 'RHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
#Now the same, with LME for all parcels in the localizers
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
#=======CUSTOM FUNS=======#
validate.names = function(df){
rtn = df
valid_column_names = make.names(names=names(df), unique=TRUE, allow_ = TRUE)
names(rtn) = valid_column_names
rtn
}
#=========================#
kids_to_process <- c('child_pilot_0306',
'child_pilot_0314',
'child_pilot_03162018',
'child_pilot_03202018',
'pilot x2', #Pilotx2 is a good kid to include for testing because they have an oddly formatted name and no gazedata
'child_pilot_03202018',
'child_pilot_03232018_3pmx2',
'child_pilot_03232018_5pm',
'child_pilot_032618_11am',
'Theodora_Pilot_32618',
'child_03272018_1130am',
'Child_Pilot_03272018_4_2pm',
'child_pilot_03282018_10_3am',
'childpilot_032918')
#Set your directories
myRepo = '/Users/mekline/Dropbox/_Projects/MannerPath-2ET/MannerPathPriming-2ET Repo'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
setwd(myRepo)
###############################
# LOAD DATA
###############################
#load participantdata
pData <- read.csv('all_participants_MPP2ET.csv')
pData <- pData %>%
filter(SubjectID %in% kids_to_process)%>%
mutate(subjectID = SubjectID)%>%
select(-SubjectID)
#Load data for all participants from their data folders
DatData <- data.frame(NULL)
TimestampData <- data.frame(NULL)
GazeData <- data.frame(NULL)
for(ID in pData$subjectID){
myDataDir <- paste(dataDir, ID, '/', sep='')
setwd(myDataDir)
print(ID)
myDatFile <- paste('data_MPPCREATION_',ID, '.dat', sep='')
myTimestampFile <- paste('timestamps_MPPCREATION_',ID,'.csv',sep='')
myMainGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Main_.*.csv")
myPracticeGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
myDatData <- read.csv(myDatFile)
myTimestampData <- read.csv(myTimestampFile)
myGazeData <- data.frame(NULL)
for (f in myMainGazeFiles){
thisGazeData = read.csv(f)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Main'
if(nrow(myGazeData) == 0) {
myGazeData = thisGazeData
} else{
myGazeData = bind_rows(myGazeData, thisGazeData)
}
}
for (f in myPracticeGazeFiles){
thisGazeData = read.csv(f)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Practice'
myGazeData = bind_rows(myGazeData, thisGazeData)
}
#Add everything to the big DFs!
if (nrow(DatData) == 0){ #special case for 1st round
DatData = myDatData
TimestampData = myTimestampData
GazeData = myGazeData
} else {
DatData = bind_rows(DatData, myDatData)
TimestampData = bind_rows(TimestampData, myTimestampData)
GazeData = bind_rows(GazeData, myGazeData)
}
}
### AT this point you have:
#GazeData
#TimestampData
###############################
# PROCESS/RECODE DATA
###############################
TimestampData <- TimestampData %>%
mutate(point_description = ifelse(str_count(point_description, "Practice"),
point_description,
paste("Main_", point_description, sep="")))%>%
separate(point_description, c("phaseTimestamp", "trialNo", "description"), extra = 'merge', remove = FALSE)
GazeData <- GazeData %>%
mutate(SubjectID = subjectID) %>%
select(-SubjectID)
DatData <- DatData %>%
select(c("SubjectNo","Date","Time","VerbDomain","Condition","trialNo","itemID" ,"verbName","verbMeaning",
"mannerSideBias", "pathSideBias","mannerSideTest", "pathSideTest")) %>%
mutate_if(is.factor, as.character) %>%
mutate(subjectID = SubjectNo) %>%
mutate(itemID = as.character(itemID))%>%
select(-SubjectNo) %>%
mutate(ExperimentPhase = 'Main') %>%
mutate(targetSideBias = ifelse(Condition == 'Manner', mannerSideBias,pathSideBias)) %>%
mutate(targetSideTest = ifelse(Condition == 'Manner', mannerSideTest, pathSideTest))
#Manually add Pratice lines to the Dat files - parameters always the same! Target on the right for trial 1, target on left for trial 2
#NOTE: This may add a trial the child didn't actually do (ie if second practice trial
#wasn't run), but this will be fine bc it won't correspond to any timestamps
pract1 <- DatData %>%
group_by(subjectID)%>%
summarise_all(first)%>%
mutate(trialNo = 1, itemID = 'practice1', verbName = 'NA', ExperimentPhase = 'Practice',
verbMeaning = 'ball', mannerSideBias = 'NA', pathSideBias = 'NA',
mannerSideTest = 'NA', pathSideTest = 'NA', targetSideBias = 'NA', targetSideTest = 'R')
pract2 <- DatData %>%
group_by(subjectID)%>%
summarise_all(first)%>%
mutate(trialNo = 2, itemID = 'practice2', verbName = 'NA', ExperimentPhase = 'Practice',
verbMeaning = 'book', mannerSideBias = 'NA', pathSideBias = 'NA',
mannerSideTest = 'NA', pathSideTest = 'NA', targetSideBias = 'NA', targetSideTest = 'L')
DatData <- bind_rows(DatData, pract1)
DatData <- bind_rows(DatData, pract2)
setwd(analysisDir)
###############################
# MERGE DATA (ahhhh!)
###############################
#Merge all subject- and trial-level data
AllSubjData <- merge(DatData, pData, by="subjectID", all.y = TRUE)
#Get start times (of the whole experiment) to normalize clock variables!
startTime <- TimestampData %>%
group_by(subjectID) %>%
arrange(system_time_stamp)%>%
filter(description == 'Start')%>%
select(subjectID, system_time_stamp)%>%
mutate(expStartTime = system_time_stamp) %>%
select(-system_time_stamp) %>%
mutate('stringexpStartTime' = as.character(expStartTime))
GazeData = merge(GazeData, startTime, by=c("subjectID"))
GazeData <- GazeData %>%
mutate(GazeDataStringTime = as.character(system_time_stamp)) %>%
mutate(adjusted_time = system_time_stamp - expStartTime) %>%
select(-c(device_time_stamp, system_time_stamp, expStartTime)) %>%
separate(description, c("x","y","z", "w", "trialNo")) %>%
select(-c(x,y,z,w))
#Reshape TimestampData
TimestampData = merge(TimestampData, startTime, by = c("subjectID"))
TimestampData <- TimestampData %>%
mutate(TimestampDataStringTime = as.character(system_time_stamp))%>%
mutate(adjusted_start_time = system_time_stamp - expStartTime) %>%
select(-c(system_time_stamp, expStartTime, point_description)) %>%
arrange(subjectID, adjusted_start_time) %>%
mutate(phaseTimestamp = factor(phaseTimestamp, levels=c("Practice","Main")))%>%
mutate(timeGroupings = paste(subjectID, phaseTimestamp, trialNo)) %>%
group_by(timeGroupings) %>%
mutate(adjusted_end_time = lead(adjusted_start_time, order_by = timeGroupings)) %>%
mutate(next_description = lead(description, order_by = timeGroupings)) %>% #NOTE: these give nonsensical values between edge cases, watch out...
ungroup() %>%
select(-timeGroupings) %>%
#Doing some cleanup on those bad edge cases
mutate(next_description = ifelse(description == 'SameVerbTest_compareVideo2_end',
'TRIAL END', next_description)) %>%
mutate(adjusted_end_time = ifelse(description == 'SameVerbTest_compareVideo2_end',
adjusted_start_time, adjusted_end_time)) %>%
mutate(segment_length_in_sec = (adjusted_end_time-adjusted_start_time)/1000000) #For checking things are the right length....
#Column cleanup
TimestampData <- TimestampData %>%
mutate(trial_sanitycheck = paste(description, next_description, sep='-TO-'))%>%
select(-c(next_description))
#Now do a cool SQL merge to find the timestamp window that each gazepoint belongs to!
#(Takes a while)
TimestampedGazeData = sqldf("select * from GazeData f1 inner join TimestampData f2
on (f1.adjusted_time > f2.adjusted_start_time
and f1.adjusted_time<= f2.adjusted_end_time
and f1.subjectID == f2.subjectID
and f1.PhaseGaze == f2.PhaseTimestamp
and f1.trialNo == f2.trialNo) ")
TimestampedGazeData <- TimestampedGazeData%>%
validate.names() %>% #(See fn at beginning of file, handles duplicated names gen'd by sqldf)
mutate(ExperimentPhase = phaseGaze) %>%
select("subjectID","ExperimentPhase", "trialNo","L_valid", "L_x","L_y","R_valid", "R_x", "R_y",
"stringexpStartTime","GazeDataStringTime",
"adjusted_time", "adjusted_start_time","adjusted_end_time",
"segment_length_in_sec","description" )
#And merge on the Trial level data!
AllData <- merge(TimestampedGazeData, AllSubjData, by=c("subjectID", "ExperimentPhase", "trialNo"), all.y = TRUE)
#########################
# MERGE TESTS
# (Don't skip these)
#########################
#GazeData should be larger than TimestampedGazeData,
#which should be the same number of rows as AllData, OR
#slightly fewer rows than AllData, to account for kids
#who have only one line (no gaze data).
nrow(GazeData)
nrow(TimestampedGazeData)
nrow(AllData)
#All participants, even those who contributed NO looking data,
#should be in the dataset at this point"
length(kids_to_process)
length(unique(AllData$subjectID))
#Similarly, all trials should be present:
nrow(DatData)
nrow(unique(AllData[c("subjectID", "ExperimentPhase","trialNo")]))
#########################
# FORMAT for eyetrackingr package
#########################
AllData <- AllData %>%
mutate(Trackloss = !R_valid & !L_valid)%>%
mutate(Trackloss = ifelse(is.na(Trackloss),TRUE, Trackloss))%>%
mutate(trialNo = as.numeric(trialNo))%>%
mutate(trialNo = ifelse(ExperimentPhase == 'Main', trialNo, trialNo-100))%>%
mutate(Gaze_x = rowMeans(cbind(R_x, L_x), na.rm=TRUE)) %>%
mutate(Gaze_y = rowMeans(cbind(R_y, L_y), na.rm=TRUE)) %>%
separate(description, c('probeType','probeSegment'), extra = "merge")
#TEST all timebins (at least in the Main exp) should be the right length for their segment. Check for problems here
segments <- AllData %>%
group_by(probeSegment, ExperimentPhase)%>%
dplyr::summarize(meanlen = mean(segment_length_in_sec, na.rm=TRUE))
segments
#Add by-probe time windows so that eyetrackingr can find them!
AllData <- AllData %>%
dplyr::group_by(subjectID,trialNo,probeType) %>%
dplyr::mutate(start_time_by_probe = min(adjusted_start_time))%>%
dplyr::mutate(end_time_by_probe = max(adjusted_end_time))%>%
ungroup()
#Add AOIs
# LEFT- liberal
# LEFT moviebox
# RIGHT - liberal
# RIGHT moviebox
# Center moviebox
#NOTE these AOIS are in relative numbers (0,0 to 1,1), and are accurate
#for display on our 1280x1040 T60; but maybe not on yours (the PTB help
#code has some pixel-based calculations!)
aois = read.csv('aoi_t60_LionRoom.csv', stringsAsFactors = FALSE)
for (i in 1:nrow(aois)) {
AllData = add_aoi(data=AllData, aoi_dataframe = aois[i,],
x_col= "Gaze_x", y_col= "Gaze_y",
aoi_name = aois[i,]$AOIName)}
#Add Derived AOIS (using the known target side!)
AllData <- AllData %>%
mutate(targetSide = ifelse(probeType == 'Bias', targetSideBias, targetSideTest))%>%
mutate(In_Target_Box = ifelse(targetSide == 'L', Left_Box, Right_Box))%>%
mutate(In_Target_Side = ifelse(targetSide == 'L', Left_Side, Right_Side))
ERData <- make_eyetrackingr_data(AllData,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "adjusted_time",
trackloss_column = "Trackloss",
aoi_columns = c('Left_Box','Right_Box',
'Center_Box','Left_Side','Right_Side',
'In_Target_Box','In_Target_Side'),
treat_non_aoi_looks_as_missing = FALSE)
#########################
# TESTS for eyetrackingr package (Don't skip!)
#########################
#During segments when a video is always playing on the right or left, we should see more
#looks in those regions!!!!
leftlooks = describe_data(ERData, describe_column = "Left_Box", group_columns = "probeSegment")
rightlooks = describe_data(ERData, describe_column = "Right_Box", group_columns = "probeSegment")
filter(bind_rows("Left_Box" = leftlooks, "Right_Box" = rightlooks, .id = 'AOI'),
probeSegment == 'left_video' | probeSegment == 'right_video')
#The descriptions of trackloss on each trial should make sense given what you know about the participants!
TL_Descriptives = trackloss_analysis(ERData)
View(TL_Descriptives)
#########################
# IN THE FUTURE, All subject descriptives should be calculated here so they can be reported!
#########################
#########################
# SUBSETTING DATA
#########################
ERData_zeroed = subset_by_window(ERData, window_start_col = "start_time_by_probe", window_end_col = "end_time_by_probe", rezero = TRUE)
Probe_Data = filter(ERData_zeroed, probeType == 'SameVerbTest' | probeType == 'Bias')
Probe_Data <- clean_by_trackloss(data = Probe_Data, trial_prop_thresh = .25)
#########################
# IN THE FUTURE, All post-data-cleaning subject descriptives should be calculated here so they can be reported!
#########################
#Assess Trackloss
trackloss_clean <- trackloss_analysis(data = Probe_Data)
trackloss_clean_subjects <- unique(trackloss_clean[, c('subjectID','TracklossForParticipant')])
mean(1 - trackloss_clean_subjects$TracklossForParticipant)
sd(1- trackloss_clean_subjects$TracklossForParticipant)
final_summary <- describe_data(Probe_Data, 'Left_Box', c('subjectID','Condition'))
mean(final_summary$NumTrials)
sd(final_summary$NumTrials)
#########################
# GRAPHS (It's very exciting!)
#########################
SV_Looks <- filter(Probe_Data, probeType == 'SameVerbTest', ExperimentPhase == 'Main',
probeSegment %in% c('left_video','right_video'))
SV_Data1 <- filter(Probe_Data, probeType == 'SameVerbTest', ExperimentPhase == 'Main',
probeSegment %in% c('compareVideo1_start','compareVideo1_still'))
SV_Data2 <- filter(Probe_Data, probeType == 'SameVerbTest', ExperimentPhase == 'Main',
probeSegment %in% c('compareVideo2_start','compareVideo2_still'))
#View(select(SV_Data1,c(subjectID, trialNo, probeType, adjusted_time,probeSegment)))
#View(select(SV_Looks,c(subjectID, trialNo, probeType, adjusted_time,probeSegment)))
SV_time_looks <- make_time_sequence_data(SV_Looks, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = "Left_Side",
summarize_by = "subjectID")
SV_time_Data1 <- make_time_sequence_data(SV_Data1, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_time_Data2 <- make_time_sequence_data(SV_Data2, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_alltime = bind_rows("LR" = SV_time_looks,
"Data1" = SV_time_Data1,
"Data2" = SV_time_Data2,.id='ResponseWindow')
SV_forgraph <- SV_alltime %>%
mutate(ResponseWindow = factor(ResponseWindow))%>%
mutate(ResponseWindow = factor(ResponseWindow, levels(ResponseWindow)[c(3,1,2)])) %>%
mutate(Time_in_Sec = Time/1000000)
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth() +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
View(SV_forgraph)
SV_time_looks <- make_time_sequence_data(SV_Looks, time_bin_size = 100000,
predictor_columns = c("Condition"),
aois = "Left_Side",
summarize_by = "subjectID")
SV_time_Data1 <- make_time_sequence_data(SV_Data1, time_bin_size = 100000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_time_Data2 <- make_time_sequence_data(SV_Data2, time_bin_size = 100000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_alltime = bind_rows("LR" = SV_time_looks,
"Data1" = SV_time_Data1,
"Data2" = SV_time_Data2,.id='ResponseWindow')
SV_forgraph <- SV_alltime %>%
mutate(ResponseWindow = factor(ResponseWindow))%>%
mutate(ResponseWindow = factor(ResponseWindow, levels(ResponseWindow)[c(3,1,2)])) %>%
mutate(Time_in_Sec = Time/1000000)
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth() +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
View(final_summary)
SV_time_looks <- make_time_sequence_data(SV_Looks, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = "Left_Side",
summarize_by = "subjectID")
SV_time_Data1 <- make_time_sequence_data(SV_Data1, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_time_Data2 <- make_time_sequence_data(SV_Data2, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_alltime = bind_rows("LR" = SV_time_looks,
"Data1" = SV_time_Data1,
"Data2" = SV_time_Data2,.id='ResponseWindow')
SV_forgraph <- SV_alltime %>%
mutate(ResponseWindow = factor(ResponseWindow))%>%
mutate(ResponseWindow = factor(ResponseWindow, levels(ResponseWindow)[c(3,1,2)])) %>%
mutate(Time_in_Sec = Time/1000000)
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth() +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
SV_time_looks <- make_time_sequence_data(SV_Looks, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = "Left_Side",
summarize_by = "subjectID")
SV_time_Data1 <- make_time_sequence_data(SV_Data1, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_time_Data2 <- make_time_sequence_data(SV_Data2, time_bin_size = 10000,
predictor_columns = c("Condition"),
aois = c("In_Target_Side"),
summarize_by = "subjectID")
SV_alltime = bind_rows("LR" = SV_time_looks,
"Data1" = SV_time_Data1,
"Data2" = SV_time_Data2,.id='ResponseWindow')
SV_forgraph <- SV_alltime %>%
mutate(ResponseWindow = factor(ResponseWindow))%>%
mutate(ResponseWindow = factor(ResponseWindow, levels(ResponseWindow)[c(3,1,2)])) %>%
mutate(Time_in_Sec = Time/1000000)
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth() +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
help(geom_smooth)
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=100) +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=10) +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=1) +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=1000) +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=1000, method="loess") +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=10, method="loess") +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=1, method="loess") +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=0.1, method="loess") +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
ggplot(data = SV_forgraph, aes(y=Prop,x=Time_in_Sec,color=Condition)) +
geom_smooth(span=0.5, method="loess") +
facet_wrap(~ResponseWindow, scales = "free_x") +
geom_line(y=0.5, color='black')
View(SV_forgraph)
