ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) %>%
mutate(lookMannerTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(NA)))))) -> allData
# Adding AOI for Path Bias and Test Bias
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookPathBias = ifelse(VerbDomain == "Motion" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) %>%
mutate(lookPathTest = ifelse(VerbDomain == "Motion" & pathSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & pathSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "Motion" & mannerSideTest == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE), as.logical(NA)))))) -> allData
# Adding AOI for Generalization Test
allData %>%
group_by(Condition, subjectID, trialNo) %>%
mutate(lookActionBias = ifelse(VerbDomain == "CoS" & pathSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & pathSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(FALSE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "L" & X < 0.605 & X > 0.25 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE),
ifelse(VerbDomain == "CoS" & mannerSideBias == "R" & X < 1.250 & X > 0.67 & Y > 0.1963 & Y < 0.6313, as.logical(TRUE), as.logical(FALSE)))))) -> allData
allPractice <- filter(allData, phase=="Practice")
# Applying it to the dataframe for trials, it's taking a long time, so we'll apply it in sections
a <- lapply(allPractice$system_time_stamp, trial_time)
allPractice$Trial_description <- a
allPractice %>%
filter(str_detect(Trial_description, "testVideos")) -> df_practice_test
df_practice_test$lookPractice <- as.logical(df_practice_test$lookPractice)
# Reformatting allData
df_practice_test$subjectID <- as.factor(df_practice_test$subjectID)
# Defining a trackloss column
df_practice_test$Trackloss_column <- ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '1', FALSE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '1', TRUE,
ifelse(df_practice_test$L_valid == '1' & df_practice_test$R_valid == '0', TRUE,
ifelse(df_practice_test$L_valid == '0' & df_practice_test$R_valid == '0', TRUE, 'Error'))))
df_practice_test$Trackloss_column <- as.logical(df_practice_test$Trackloss_column)
# Defining column for looks to anything other than the AOI's
df_practice_test$lookNotAOI <- ifelse(df_practice_test$Trackloss_column == "FALSE" & df_practice_test$lookPractice == "FALSE" & df_practice_test$lookNotPractice == "FALSE", TRUE, FALSE)
# Starting to use eyetrackingR
data_practice <- make_eyetrackingr_data(df_practice_test,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice", "lookNotAOI", "lookPracticeHalf", "lookNotPracticeHalf"),
treat_non_aoi_looks_as_missing = FALSE
)
data_practice <- data_practice %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_practice <- make_eyetrackingr_data(data_practice,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPractice", "lookNotPractice", "lookNotAOI"),
treat_non_aoi_looks_as_missing = FALSE
)
# making eyetrackingR data for AOI half screen
data_practice_half <- make_eyetrackingr_data(data_practice,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookPracticeHalf", "lookNotPracticeHalf"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_practice <- subset_by_window(data_practice, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# again for AIO half screen
response_window_practice_half <- subset_by_window(data_practice_half, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.2 seconds)
response_time_practice <- make_time_sequence_data(response_window_practice, time_bin_size = 200000,
aois = c("lookPractice", "lookNotPractice", "lookNotAOI")
)
# transforming microseconds to miliseconds
response_time_practice <- response_time_practice %>%
mutate(time_ms = Time/1000)
# again for AIO half screen
response_time_practice_half <- make_time_sequence_data(response_window_practice_half, time_bin_size = 200000,
aois = c("lookPracticeHalf", "lookNotPracticeHalf")
)
response_time_practice_half <- response_time_practice_half %>%
mutate(time_ms = Time/1000)
# visualize time results
plot_practice_mean <- response_time_practice %>%
group_by(AOI, TimeBin, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')%>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_mean_half <- response_time_practice_half %>%
group_by(AOI, TimeBin, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')%>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_trial <- response_time_practice %>%
group_by(AOI, TimeBin, trialNo, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
plot_practice_ind <- response_time_practice %>%
group_by(subjectID, AOI, TimeBin, time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE))
ggplot(plot_practice_mean, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_line_AOI.png")
ggplot(plot_practice_mean_half, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_line_AOI_half_screen.png")
ggplot(plot_practice_ind, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~subjectID) +
geom_line()
ggplot(plot_practice_trial, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~trialNo) +
geom_line()
tl_practice_analysis <- trackloss_analysis(data_practice)
ggplot(tl_practice_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot() +
ylab("Trackloss") +
xlab("Trial") +
ggtitle("Trackloss during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_trackloss_per_trial.png")
response_window_agg_by_sub_practice <- make_time_window_data(data_practice, aois = c("lookPractice", "lookNotPractice", "lookNotAOI"), summarize_by = c("subjectID"))
# Creating error bars
response_window_agg_by_sub_practice_sum <- response_window_agg_by_sub_practice %>%
dplyr::group_by(AOI) %>%   # the grouping variable
summarise(mean_prop = mean(Prop),  # calculates the mean of each group
sd_prop = sd(Prop), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(Prop)/sqrt(n())) # calculates the standard error of each group
# Creating a bar graph for the proportion of looks to the correct video
ggplot(data=response_window_agg_by_sub_practice_sum, aes(x=AOI, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks during practice") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_bar_AOI.png")
response_window_agg_by_sub_practice_half <- make_time_window_data(data_practice_half, aois = c("lookPracticeHalf", "lookNotPracticeHalf"), summarize_by = c("subjectID"))
# Creating error bars
response_window_agg_by_sub_practice_half_sum <- response_window_agg_by_sub_practice_half %>% # the names of the new data frame and the data frame to be summarised
group_by(AOI) %>%   # the grouping variable
summarise(mean_prop = mean(Prop),  # calculates the mean of each group
sd_prop = sd(Prop), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(Prop)/sqrt(n())) # calculates the standard error of each group
# Creating a bar graph for the proportion of looks to the correct video
ggplot(data=response_window_agg_by_sub_practice_half_sum, aes(x=AOI, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks during practice trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_bar_AOI_half_screen.png")
View(response_window_agg_by_sub_practice)
plot_practice_mean_ind <- response_time_practice %>%
group_by(AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_mean_ind_sum <- plot_practice_mean_ind %>%
dplyr::group_by(AOI, bigTimeBin) %>%   # the grouping variable
summarise(mean_prop = mean(meanProp),  # calculates the mean of each group
sd_prop = sd(meanProp), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(meanProp)/sqrt(n())) # calculates the standard error of each group
ggplot(plot_practice_mean_ind_sum, aes(x=AOI, y=mean_prop, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2, position=position_dodge(.9)) +
ylab("Proportion of looks to correct video")  +
ggtitle("Looks to practice trials per quarter") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=12),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_bar_AOI_quarters.png")
plot_practice_mean_ind_half <- response_time_practice_half %>%
group_by(AOI, TimeBin) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(bigTimeBin = ifelse(TimeBin < 15, "FirstQuarter", ifelse(TimeBin <30, "SecondQuarter", ifelse(TimeBin < 45, "ThirdQuarter", "FourthQuarter"))))
plot_practice_mean_ind_half_sum <- plot_practice_mean_ind_half %>%
dplyr::group_by(AOI, bigTimeBin) %>%   # the grouping variable
summarise(mean_prop = mean(meanProp),  # calculates the mean of each group
sd_prop = sd(meanProp), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(meanProp)/sqrt(n())) # calculates the standard error of each group
ggplot(plot_practice_mean_ind_half_sum, aes(x=AOI, y=mean_prop, fill = AOI)) +
facet_wrap(~bigTimeBin) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2, position=position_dodge(.9))  +
ylab("Proportion of looks to correct video") +
ggtitle("Looks to practice trials per quarter") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=12),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_practice_bar_AOI_quarters_half_screen.png")
allMain <- filter(allData, phase=="Main")
# Applying it to the dataframe for trials, it's taking a long time, so we'll apply it in sections
a <- lapply(allMain$system_time_stamp, trial_time)
allMain$Trial_description <- a
allMain <- allMain[grep("ambig_video|trainingVideo|testVideo|biasVideo|testVideos|^biasTest", allMain$Trial_description),]
allMain$trialNo <- as.factor(allMain$trialNo)
allMain$lookMannerTest <- as.logical(allMain$lookMannerTest)
allMain$lookPathTest <- as.logical(allMain$lookPathTest)
allMain$system_time_stamp <- as.numeric(allMain$system_time_stamp)
# IDK IF THIS IS KOSHER OR NOT
## only keep the unique rows from the input
allMain %>%
distinct(trialNo, system_time_stamp, .keep_all = TRUE) -> allMain
# Starting to use eyetrackingR
data_main <- make_eyetrackingr_data(allMain,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# Boxplot for the mean trackloss during the trials
tl_main_analysis <- trackloss_analysis(data_main)
ggplot(tl_main_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot() +
ylab("Trackloss") +
xlab("Trial") +
ggtitle("Trackloss during main trials") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_main_trackloss_per_trial.png")
allMain_test <- filter(allData, phase=="Main")
# Applying it to the dataframe for trials, it's taking a long time, so we'll apply it in sections
a <- lapply(allMain_test$system_time_stamp, trial_time)
allMain_test$Trial_description <- a
allMain_test_noBias <- allMain_test[grep("testVideos", allMain_test$Trial_description),]
allMain_test_noBias$trialNo <- as.factor(allMain_test_noBias$trialNo)
allMain_test_noBias$lookMannerTest <- as.logical(allMain_test_noBias$lookMannerTest)
allMain_test_noBias$lookPathTest <- as.logical(allMain_test_noBias$lookPathTest)
allMain_test_noBias$system_time_stamp <- as.numeric(allMain_test_noBias$system_time_stamp)
# IDK IF THIS IS KOSHER OR NOT
## only keep the unique rows from the input
allMain_test_noBias %>%
distinct(trialNo, system_time_stamp, .keep_all = TRUE) -> allMain_test_noBias
# Starting to use eyetrackingR
data_noBias <- make_eyetrackingr_data(allMain_test_noBias,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# Cleaning data with 25% trackloss
response_window_clean_noBias <- clean_by_trackloss(data = data_noBias, trial_prop_thresh = .25)
data_noBias <- data_noBias %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_noBias <- make_eyetrackingr_data(data_noBias,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerTest", "lookPathTest"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_noBias <- subset_by_window(data_noBias, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.3 seconds)
response_time_noBias <- make_time_sequence_data(response_window_noBias, time_bin_size = 300000,
predictor_columns = c("Condition"),
aois = c("lookMannerTest", "lookPathTest"),
summarize_by = "subjectID"
)
# transforming microseconds to miliseconds
response_time_noBias <- response_time_noBias %>%
mutate(time_ms = Time/1000)
# visualize time results
plot_noBias_mean <- response_time_noBias %>%
group_by(AOI, TimeBin, Condition,time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')
# plot data for the mean in a line graph
ggplot(plot_noBias_mean, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~Condition) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle ("Looks to test videos") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_main_lookingtimesAOI_learning_test.png")
# Aggregating by subjectID to get a proportion of looks to screen by AOI
response_window_agg_by_sub_noBias <- make_time_window_data(response_window_clean_noBias, aois = c("lookMannerTest", "lookPathTest"), predictor_columns=c("Condition"), summarize_by = c("subjectID"))
# Creating error bars
response_window_agg_by_sub_noBias_sum <- response_window_agg_by_sub_noBias %>%
dplyr::group_by(Condition, AOI) %>%   # the grouping variable
summarise(mean_prop = mean(Prop),  # calculates the mean of each group
sd_prop = sd(Prop), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(Prop)/sqrt(n())) # calculates the standard error of each group
# Creating the bar graph for the learning tests
ggplot(data=response_window_agg_by_sub_noBias_sum, aes(x=Condition, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2, position=position_dodge(.9)) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks to test videos")
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_noBias_bar_AOI.png")
response_window_agg_by_sub_trialNo_noBias <- make_time_window_data(response_window_clean_noBias, aois = c("lookMannerTest", "lookPathTest"), predictor_columns=c("Condition"), summarize_by = c("subjectID", "trialNo"))
# Creating a bar graph for every trial of the learning tests
ggplot(data=response_window_agg_by_sub_trialNo_noBias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
facet_wrap(~trialNo) +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
tl_noBias_analysis <- trackloss_analysis(data_noBias)
ggplot(tl_noBias_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot() +
ylab("Trackloss") +
xlab("Trial") +
ggtitle("Trackloss during test videos") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_mainNoBias_trackloss_per_trial.png")
allMain_test_Bias <- allMain_test[grep("biasTest", allMain_test$Trial_description),]
allMain_test_Bias$trialNo <- as.factor(allMain_test_Bias$trialNo)
allMain_test_Bias$lookMannerBias <- as.logical(allMain_test_Bias$lookMannerBias)
allMain_test_Bias$lookPathBias <- as.logical(allMain_test_Bias$lookPathBias)
allMain_test_Bias$system_time_stamp <- as.numeric(allMain_test_Bias$system_time_stamp)
# IDK IF THIS IS KOSHER OR NOT
## only keep the unique rows from the input
allMain_test_Bias %>%
distinct(trialNo, system_time_stamp, .keep_all = TRUE) -> allMain_test_Bias
# Starting to use eyetrackingR
data_Bias <- make_eyetrackingr_data(allMain_test_Bias,
participant_column = "subjectID",
trial_column = "trialNo",
item_columns = "itemID",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerBias", "lookPathBias"),
treat_non_aoi_looks_as_missing = FALSE
)
# Cleaning data with 25% trackloss
response_window_clean_Bias <- clean_by_trackloss(data = data_Bias, trial_prop_thresh = .25)
#############################
# GRAPHS FOR MAIN PILOT STUDY
#############################
# rank the data, based on subjectID and trialNo
data_Bias <- data_Bias %>%
group_by(subjectID, trialNo) %>%
mutate(Rank = dense_rank(system_time_stamp)) %>%
arrange(subjectID, trialNo, Rank)
data_Bias <- make_eyetrackingr_data(data_Bias,
participant_column = "subjectID",
trial_column = "trialNo",
time_column = "system_time_stamp",
trackloss_column = "Trackloss_column",
aoi_columns = c("lookMannerBias", "lookPathBias"),
treat_non_aoi_looks_as_missing = FALSE
)
# rezero system time stamps, so that at every trial start, the system time stamp is 0
response_window_Bias <- subset_by_window(data_Bias, window_start_msg = 1, msg_col = "Rank", rezero= TRUE, remove= FALSE)
# aggregate across trials within subjects in time analysis (time bin size is 0.3 seconds)
response_time_Bias <- make_time_sequence_data(response_window_Bias, time_bin_size = 300000,
predictor_columns = c("Condition"),
aois = c("lookMannerBias", "lookPathBias"),
summarize_by = "subjectID"
)
# transforming microseconds to miliseconds
response_time_Bias <- response_time_Bias %>%
mutate(time_ms = Time/1000)
# visualize time results
plot_Bias_mean <- response_time_Bias %>%
group_by(AOI, TimeBin, Condition,time_ms) %>%
summarize(meanProp = mean(Prop, na.rm = TRUE)) %>%
mutate(subjectID = 'Mean')
# plot data for the mean in a line graph
ggplot(plot_Bias_mean, aes(x=time_ms, y=meanProp, color = AOI)) +
facet_wrap(~Condition) +
geom_line() +
ylab("Proportion of looks to video") +
xlab("Time (ms)") +
ggtitle("Looks to bias test videos") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_main_lookingtimesAOI_bias_test.png")
response_window_agg_by_sub_Bias <- make_time_window_data(response_window_clean_Bias, aois = c("lookMannerBias", "lookPathBias"), predictor_columns=c("Condition"), summarize_by = c("subjectID"))
# Creating the error bars
response_window_agg_by_sub_Bias_sum <- response_window_agg_by_sub_Bias %>%
dplyr::group_by(Condition, AOI) %>%   # the grouping variable
summarise(mean_prop = mean(Prop),  # calculates the mean of each group
sd_prop = sd(Prop), # calculates the standard deviation of each group
n_prop = n(),  # calculates the sample size per group
SE_prop = sd(Prop)/sqrt(n())) # calculates the standard error of each group
# Creating the bar graph
ggplot(data=response_window_agg_by_sub_Bias_sum, aes(x=Condition, y=mean_prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
geom_errorbar(aes(ymin = mean_prop - sd_prop, ymax = mean_prop + sd_prop), width=0.2, position=position_dodge(.9)) +
ylab("Proportion of looks to correct video") +
ggtitle("Looks to bias test videos") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_Bias_bar_AOI.png")
response_window_agg_by_sub_trialNo_Bias <- make_time_window_data(response_window_clean_Bias, aois = c("lookMannerBias", "lookPathBias"), predictor_columns=c("Condition"), summarize_by = c("subjectID", "trialNo"))
# Creating a bar graph for every trial seperately
ggplot(data=response_window_agg_by_sub_trialNo_Bias, aes(x=Condition, y=Prop, fill=AOI)) +
geom_bar(stat="summary", fun.y = "mean", position=position_dodge()) +
ylab("Proportion of looks to correct video") +
facet_wrap(~trialNo) +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
tl_Bias_analysis <- trackloss_analysis(data_Bias)
ggplot(tl_Bias_analysis, aes(x=trialNo, y=TracklossForTrial)) +
geom_boxplot() +
ylab("Trackloss") +
xlab("Trial") +
ggtitle("Trackloss during bias test videos") +
theme(axis.title = element_text(size=18),
axis.text.x  = element_text(size=18),
axis.text.y = element_text(size=18),
plot.title = element_text(size=18, face="bold"))
ggsave("/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/figs/pilot2_mainBias_trackloss_per_trial.png")
save.image("D:/D; Documenten/Studies/ReMa Linguistics/Internship/Analysis/Workspace_NoBias_Pilot2.RData")
setwd('/Users/Lotte/Documents/Github/MannerPathPriming-2ET/Analysis/RData')
w1 <- new.env()
w2 <- new.env()
load('pilot_1023.RData', envir=w1)
load('pilot_1026.RData', envir=w2)
View(w1)
parent.env(e2) <- w1
parent.env(w2) <- e1
parent.env(w2) <- w1
with(w2, dataFrom1 + dataFrom2)
appendEnv(w1, w2)
appendEnv = function(e1, e2) {
+     e1name = deparse(substitute(e1))
+     e2name = deparse(substitute(e2))
+     listE1 = ls(e1)
+     listE2 = ls(e2)
+     for(v in listE2) {
+         if(v %in% listE1) warning(sprintf("Variable %s is in e1, too!", v))
+         e1[[v]] = e2[[v]]
+     }
+ }
appendEnv = function(e1, e2) {
e1name = deparse(substitute(e1))
e2name = deparse(substitute(e2))
listE1 = ls(e1)
listE2 = ls(e2)
for(v in listE2) {
if(v %in% listE1) warning(sprintf("Variable %s is in e1, too!", v))
e1[[v]] = e2[[v]]
}
}
appendEnv(w1, w2)
warnings()
View(w2)
View(w1)
View(w1)
rbind(w1, w2)
c(w1, w2)
w3 <- as.environment(sapply(c(w1,w2),as.list))
ls(env=w3)
